event Approval(address indexed _arg0, address indexed _arg1, uint256 _arg2)
event Burn(address indexed _arg0, uint256 _arg1)
event Transfer(address indexed _arg0, address indexed _arg1, uint256 _arg2)

mapping (address => uint256) mapping1;
mapping (address => mapping (address => uint256)) mapping2;
mapping (uint256 => mapping (uint256 => unknown)) mapping3;
mapping (unknown => unknown) mapping4;
mapping (unknown => mapping (unknown => unknown)) mapping5;
mapping (unknown => mapping (unknown => unknown)) mapping6;
mapping (uint256 => unknown) mapping7;
mapping (unknown => unknown) mapping8;

unknown public owner;
unknown public dev;
unknown var3;
unknown public decimals;
unknown public totalSupply;
unknown var6;
unknown var7;
unknown public totalBurn;
unknown public totalSale;
unknown public initTime;
unknown var11;
unknown var12;
unknown var13;
unknown var14;
unknown var15;
unknown var16;
unknown var17;
unknown var18;

function getBuyPrice() public returns (unknown) {
    if(initTime <= block.timestamp) {
        require(storage[17]);
        if(((block.timestamp - initTime) / storage[17]) >= 6) {
            if(((block.timestamp - initTime) / storage[17]) >= 6) {
                ifstorage[2c] {
                    if(var11 <= 0) {
                        require((186a0 * (a ** decimals)));
                        require((30d40 * (a ** decimals)));
                        return(((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)));
                    } else {
                        require((186a0 * (a ** decimals)));
                        require((30d40 * (a ** decimals)));
                        return(((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)));
                    }
                } else {
                    return(storage[1d]);
                }
            } else {
                require((((block.timestamp - initTime) / storage[17]) < 6));
                return(storage[(((block.timestamp - initTime) / storage[17]) + 18)]);
            }
        } else {
            require(storage[16]);
            if((totalSale / storage[16]) <= ((block.timestamp - initTime) / storage[17])) {
                if(((block.timestamp - initTime) / storage[17]) >= 6) {
                    ifstorage[2c] {
                        if(var11 <= 0) {
                            require((186a0 * (a ** decimals)));
                            require((30d40 * (a ** decimals)));
                            return(((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)));
                        } else {
                            require((186a0 * (a ** decimals)));
                            require((30d40 * (a ** decimals)));
                            return(((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)));
                        }
                    } else {
                        return(storage[1d]);
                    }
                } else {
                    require((((block.timestamp - initTime) / storage[17]) < 6));
                    return(storage[(((block.timestamp - initTime) / storage[17]) + 18)]);
                }
            } else {
                if((totalSale / storage[16]) >= 6) {
                    ifstorage[2c] {
                        if(var11 <= 0) {
                            require((186a0 * (a ** decimals)));
                            require((30d40 * (a ** decimals)));
                            return(((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)));
                        } else {
                            require((186a0 * (a ** decimals)));
                            require((30d40 * (a ** decimals)));
                            return(((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)));
                        }
                    } else {
                        return(storage[1d]);
                    }
                } else {
                    require(((totalSale / storage[16]) < 6));
                    return(storage[((totalSale / storage[16]) + 18)]);
                }
            }
        }
    } else {
        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
    }
}

function name() public {
    if(((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2) == 0) {
        memory[(80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))] = ((20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))) - (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20))));
        memory[(20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20))))] = ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2);
        if(0 >= ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) {
            if((1f && ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) == 0) {
                return memory[(80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20))):((80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))+((((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))))) - (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))))];
            } else {
                memory[((((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))))) - (1f && ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)))] = ((~((100 ** (20 - (1f && ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)))) - 1)) && (memory[((((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))))) - (1f && ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)))]));
                return memory[(80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20))):((80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))+((20 + ((((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))))) - (1f && ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)))) - (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))))];
            }
        } else {
            memory[(20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))))] = (memory[a0]);
            if(20 >= ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) goto(31c);
            memory[((20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20))))) + 20)] = (memory[c0]);
            goto(301);
        }
    } else {
        if(1f < ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) {
            if((a0 + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) > c0) {
                if((a0 + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) > e0) goto(15a4);
                memory[(80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))] = ((20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))) - (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20))));
                memory[(20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20))))] = ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2);
                if(0 >= ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) {
                    if((1f && ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) == 0) {
                        return memory[(80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20))):((80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))+((((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))))) - (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))))];
                    } else {
                        memory[((((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))))) - (1f && ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)))] = ((~((100 ** (20 - (1f && ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)))) - 1)) && (memory[((((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))))) - (1f && ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)))]));
                        return memory[(80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20))):((80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))+((20 + ((((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))))) - (1f && ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)))) - (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))))];
                    }
                } else {
                    memory[(20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))))] = storage[keccak256(3)];
                    if(20 >= ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) goto(31c);
                    memory[((20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20))))) + 20)] = storage[(1 + keccak256(3))];
                    goto(301);
                }
            } else {
                memory[(80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))] = ((20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))) - (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20))));
                memory[(20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20))))] = ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2);
                if(0 >= ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) {
                    if((1f && ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) == 0) {
                        return memory[(80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20))):((80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))+((((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))))) - (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))))];
                    } else {
                        memory[((((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))))) - (1f && ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)))] = ((~((100 ** (20 - (1f && ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)))) - 1)) && (memory[((((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))))) - (1f && ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)))]));
                        return memory[(80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20))):((80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))+((20 + ((((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))))) - (1f && ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)))) - (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))))];
                    }
                } else {
                    memory[(20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))))] = storage[keccak256(3)];
                    if(20 >= ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) goto(31c);
                    memory[((20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20))))) + 20)] = (memory[c0]);
                    goto(301);
                }
            }
        } else {
            memory[(80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))] = ((20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))) - (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20))));
            memory[(20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20))))] = ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2);
            if(0 >= ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) {
                if((1f && ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) == 0) {
                    return memory[(80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20))):((80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))+((((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))))) - (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))))];
                } else {
                    memory[((((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))))) - (1f && ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)))] = ((~((100 ** (20 - (1f && ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)))) - 1)) && (memory[((((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))))) - (1f && ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)))]));
                    return memory[(80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20))):((80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))+((20 + ((((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))))) - (1f && ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)))) - (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))))];
                }
            } else {
                memory[(20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20)))))] = ((storage[3] / 100) * 100);
                if(20 >= ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) goto(31c);
                memory[((20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[3]) == 0)) - 1) && storage[3]) / 2)) / 20) * 20))))) + 20)] = (memory[c0]);
                goto(301);
            }
        }
    }
}

function approve(address _arg0, uint256 _arg1) public {
    require(((msg.data.length - 4) >= 40));
    mapping1[msg.sender] = _arg1;
    emit Approval(msg.sender, _arg0, _arg1)
    return 1;
}

function 09953b2f() public view {
    return(var7);
}

function 0ed5d4f8() public returns (uint256, uint256) {
    require(((msg.data.length - 4) >= 20));
    if(msg.sender == var6) {
        if(mapping2[_arg0] >= storage[13]) {
            mapping2[_arg0] = (storage[13] - 1);
            return(0, 0);
        } else {
            if((mapping2[_arg0][2] == 0) == 0) {
                if((1 + mapping2[_arg0]) >= storage[13]) goto(1930);
                if((mapping2[_arg0][2] == 0) == 0) goto(1923);
                if(mapping2[_arg0][1] <= 0) {
                    if((mapping2[_arg0][2] == 1) == 0) {
                        mapping2[_arg0] = (100 || (-ff01 && mapping2[_arg0][2]));
                        goto(17d1);
                    } else {
                        mapping2[_arg0] = (100 || (-ff01 && mapping2[_arg0][2]));
                        goto(17d1);
                    }
                } else {
                    if((mapping2[_arg0][2] == 1) == 0) {
                        mapping2[_arg0] = (100 || (-ff01 && mapping2[_arg0][2]));
                        goto(17d1);
                    } else {
                        mapping2[_arg0] = (100 || (-ff01 && mapping2[_arg0][2]));
                        goto(17d1);
                    }
                }
            } else {
                if(mapping2[_arg0][1] <= 0) {
                    if((mapping2[_arg0][2] == 1) == 0) {
                        mapping2[_arg0] = (100 || (-ff01 && mapping2[_arg0][2]));
                        if((1 + mapping2[_arg0]) >= storage[13]) goto(1930);
                        if((mapping2[_arg0][2] == 0) == 0) goto(1923);
                        if(mapping2[_arg0][1] <= 0) goto(1877);
                        if((mapping2[_arg0][2] == 1) == 0) goto(18e2);
                        mapping2[_arg0] = (100 || (-ff01 && mapping2[_arg0][2]));
                        goto(17d1);
                    } else {
                        mapping2[_arg0] = (100 || (-ff01 && mapping2[_arg0][2]));
                        if((1 + mapping2[_arg0]) >= storage[13]) goto(1930);
                        if((mapping2[_arg0][2] == 0) == 0) goto(1923);
                        if(mapping2[_arg0][1] <= 0) goto(1877);
                        if((mapping2[_arg0][2] == 1) == 0) goto(18e2);
                        mapping2[_arg0] = (100 || (-ff01 && mapping2[_arg0][2]));
                        goto(17d1);
                    }
                } else {
                    if((mapping2[_arg0][2] == 1) == 0) {
                        mapping2[_arg0] = (100 || (-ff01 && mapping2[_arg0][2]));
                        if((1 + mapping2[_arg0]) >= storage[13]) goto(1930);
                        if((mapping2[_arg0][2] == 0) == 0) goto(1923);
                        if(mapping2[_arg0][1] <= 0) goto(1877);
                        if((mapping2[_arg0][2] == 1) == 0) goto(18e2);
                        mapping2[_arg0] = (100 || (-ff01 && mapping2[_arg0][2]));
                        goto(17d1);
                    } else {
                        mapping2[_arg0] = (100 || (-ff01 && mapping2[_arg0][2]));
                        if((1 + mapping2[_arg0]) >= storage[13]) goto(1930);
                        if((mapping2[_arg0][2] == 0) == 0) goto(1923);
                        if(mapping2[_arg0][1] <= 0) goto(1877);
                        if((mapping2[_arg0][2] == 1) == 0) goto(18e2);
                        mapping2[_arg0] = (100 || (-ff01 && mapping2[_arg0][2]));
                        goto(17d1);
                    }
                }
            }
        }
    } else {
        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
    }
}

function 0f96b16b() public {
    require(((msg.data.length - 4) >= 20));
    require((_arg0 < 4));
    return(storage[(_arg0 + 28)]);
}

function 1837cc3b() public {
    require(((msg.data.length - 4) >= 40));
    return(mapping3[_arg0]);
}

function getInfo(uint256 _arg0) public {
    require(((msg.data.length - 4) >= 20));
    if(mapping3[storage[13]][9] == 0) {
        memory[(380 + (20 + (20 * mapping3[storage[13]][9])))] = mapping3[storage[13]][10];
        if(mapping3[storage[13]][10] == 0) {
            if(mapping5[_arg0] >= storage[13]) {
                if(initTime <= block.timestamp) {
                    require(storage[17]);
                    if(((block.timestamp - initTime) / storage[17]) >= 6) {
                        if(((block.timestamp - initTime) / storage[17]) >= 6) {
                            ifstorage[2c] {
                                if(var11 <= 0) {
                                    require((186a0 * (a ** decimals)));
                                    require((30d40 * (a ** decimals)));
                                    if(storage[2c] == 0) {
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    } else {
                                        require(storage[15]);
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    }
                                } else {
                                    require((186a0 * (a ** decimals)));
                                    require((30d40 * (a ** decimals)));
                                    if(storage[2c] == 0) {
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    } else {
                                        require(storage[15]);
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    }
                                }
                            } else {
                                if(storage[2c] == 0) {
                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                } else {
                                    require(storage[15]);
                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                }
                            }
                        } else {
                            require((((block.timestamp - initTime) / storage[17]) < 6));
                            if(storage[2c] == 0) {
                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                            } else {
                                require(storage[15]);
                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                            }
                        }
                    } else {
                        require(storage[16]);
                        if((totalSale / storage[16]) <= ((block.timestamp - initTime) / storage[17])) {
                            if(((block.timestamp - initTime) / storage[17]) >= 6) {
                                ifstorage[2c] {
                                    if(var11 <= 0) {
                                        require((186a0 * (a ** decimals)));
                                        require((30d40 * (a ** decimals)));
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    } else {
                                        require((186a0 * (a ** decimals)));
                                        require((30d40 * (a ** decimals)));
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    }
                                } else {
                                    if(storage[2c] == 0) {
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    } else {
                                        require(storage[15]);
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    }
                                }
                            } else {
                                require((((block.timestamp - initTime) / storage[17]) < 6));
                                if(storage[2c] == 0) {
                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                } else {
                                    require(storage[15]);
                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                }
                            }
                        } else {
                            if((totalSale / storage[16]) >= 6) {
                                ifstorage[2c] {
                                    if(var11 <= 0) {
                                        require((186a0 * (a ** decimals)));
                                        require((30d40 * (a ** decimals)));
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    } else {
                                        require((186a0 * (a ** decimals)));
                                        require((30d40 * (a ** decimals)));
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    }
                                } else {
                                    if(storage[2c] == 0) {
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    } else {
                                        require(storage[15]);
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    }
                                }
                            } else {
                                require(((totalSale / storage[16]) < 6));
                                if(storage[2c] == 0) {
                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[((totalSale / storage[16]) + 18)];
                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                } else {
                                    require(storage[15]);
                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[((totalSale / storage[16]) + 18)];
                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                }
                            }
                        }
                    }
                } else {
                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = 8c379a000000000000000000000000000000000000000000000000000000000;
                    memory[(4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = ((20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))) - (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))));
                    memory[(20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 13;
                    memory[(20 + (20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = 536166654d61746820737562206661696c656400000000000000000000000000;
                    revert(memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))]);
                }
            } else {
                if(mapping2[_arg0][1] <= 0) {
                    if(mapping2[_arg0][1] <= 0) {
                        if((mapping2[_arg0][2] == 1) == 0) {
                            if((mapping2[_arg0][2] == 1) == 0) {
                                if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                if(mapping2[_arg0][1] <= 0) goto(3824);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                goto(37ad);
                            } else {
                                if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                if(mapping2[_arg0][1] <= 0) goto(3824);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                goto(37ad);
                            }
                        } else {
                            if((mapping2[_arg0][2] == 0) == 0) {
                                if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                if(mapping2[_arg0][1] <= 0) goto(3824);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                goto(37ad);
                            } else {
                                if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                if(mapping2[_arg0][1] <= 0) goto(3824);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                goto(37ad);
                            }
                        }
                    } else {
                        if((mapping2[_arg0][2] == 1) == 0) {
                            if((mapping2[_arg0][2] == 1) == 0) {
                                if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                if(mapping2[_arg0][1] <= 0) goto(3824);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                goto(37ad);
                            } else {
                                if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                if(mapping2[_arg0][1] <= 0) goto(3824);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                goto(37ad);
                            }
                        } else {
                            if((mapping2[_arg0][2] == 0) == 0) {
                                if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                if(mapping2[_arg0][1] <= 0) goto(3824);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                goto(37ad);
                            } else {
                                if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                if(mapping2[_arg0][1] <= 0) goto(3824);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                goto(37ad);
                            }
                        }
                    }
                } else {
                    if((mapping2[_arg0][2] == 0) == 0) {
                        if((mapping2[_arg0][2] == 1) == 0) {
                            if((mapping2[_arg0][2] == 1) == 0) {
                                if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                if(mapping2[_arg0][1] <= 0) goto(3824);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                goto(37ad);
                            } else {
                                if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                if(mapping2[_arg0][1] <= 0) goto(3824);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                goto(37ad);
                            }
                        } else {
                            if((mapping2[_arg0][2] == 0) == 0) {
                                if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                if(mapping2[_arg0][1] <= 0) goto(3824);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                goto(37ad);
                            } else {
                                if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                if(mapping2[_arg0][1] <= 0) goto(3824);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                goto(37ad);
                            }
                        }
                    } else {
                        if((mapping2[_arg0][2] == 1) == 0) {
                            if((mapping2[_arg0][2] == 1) == 0) {
                                if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                if(mapping2[_arg0][1] <= 0) goto(3824);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                goto(37ad);
                            } else {
                                if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                if(mapping2[_arg0][1] <= 0) goto(3824);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                goto(37ad);
                            }
                        } else {
                            if((mapping2[_arg0][2] == 0) == 0) {
                                if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                if(mapping2[_arg0][1] <= 0) goto(3824);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                goto(37ad);
                            } else {
                                if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                if(mapping2[_arg0][1] <= 0) goto(3824);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                goto(37ad);
                            }
                        }
                    }
                }
            }
        } else {
            memory[(20 + (380 + (20 + (20 * mapping3[storage[13]][9]))))] = storage[keccak256((keccak256(storage[13], 21) + a))];
            if(((20 + (380 + (20 + (20 * mapping3[storage[13]][9])))) + (20 * mapping3[storage[13]][10])) > (20 + (20 + (380 + (20 + (20 * mapping3[storage[13]][9])))))) {
                memory[(20 + (20 + (380 + (20 + (20 * mapping3[storage[13]][9])))))] = storage[(1 + keccak256((keccak256(storage[13], 21) + a)))];
                if(((20 + (380 + (20 + (20 * mapping3[storage[13]][9])))) + (20 * mapping3[storage[13]][10])) > (20 + (20 + (20 + (380 + (20 + (20 * mapping3[storage[13]][9]))))))) goto(1ac6);
                if(mapping5[_arg0] >= storage[13]) {
                    if(initTime <= block.timestamp) {
                        require(storage[17]);
                        if(((block.timestamp - initTime) / storage[17]) >= 6) {
                            if(((block.timestamp - initTime) / storage[17]) >= 6) {
                                ifstorage[2c] {
                                    if(var11 <= 0) {
                                        require((186a0 * (a ** decimals)));
                                        require((30d40 * (a ** decimals)));
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    } else {
                                        require((186a0 * (a ** decimals)));
                                        require((30d40 * (a ** decimals)));
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    }
                                } else {
                                    if(storage[2c] == 0) {
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    } else {
                                        require(storage[15]);
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    }
                                }
                            } else {
                                require((((block.timestamp - initTime) / storage[17]) < 6));
                                if(storage[2c] == 0) {
                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                } else {
                                    require(storage[15]);
                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                }
                            }
                        } else {
                            require(storage[16]);
                            if((totalSale / storage[16]) <= ((block.timestamp - initTime) / storage[17])) {
                                if(((block.timestamp - initTime) / storage[17]) >= 6) {
                                    ifstorage[2c] {
                                        if(var11 <= 0) {
                                            require((186a0 * (a ** decimals)));
                                            require((30d40 * (a ** decimals)));
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        } else {
                                            require((186a0 * (a ** decimals)));
                                            require((30d40 * (a ** decimals)));
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        }
                                    } else {
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    }
                                } else {
                                    require((((block.timestamp - initTime) / storage[17]) < 6));
                                    if(storage[2c] == 0) {
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    } else {
                                        require(storage[15]);
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    }
                                }
                            } else {
                                if((totalSale / storage[16]) >= 6) {
                                    ifstorage[2c] {
                                        if(var11 <= 0) {
                                            require((186a0 * (a ** decimals)));
                                            require((30d40 * (a ** decimals)));
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        } else {
                                            require((186a0 * (a ** decimals)));
                                            require((30d40 * (a ** decimals)));
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        }
                                    } else {
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    }
                                } else {
                                    require(((totalSale / storage[16]) < 6));
                                    if(storage[2c] == 0) {
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[((totalSale / storage[16]) + 18)];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    } else {
                                        require(storage[15]);
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[((totalSale / storage[16]) + 18)];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    }
                                }
                            }
                        }
                    } else {
                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = 8c379a000000000000000000000000000000000000000000000000000000000;
                        memory[(4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = ((20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))) - (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))));
                        memory[(20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 13;
                        memory[(20 + (20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = 536166654d61746820737562206661696c656400000000000000000000000000;
                        revert(memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))]);
                    }
                } else {
                    if(mapping2[_arg0][1] <= 0) {
                        if(mapping2[_arg0][1] <= 0) {
                            if((mapping2[_arg0][2] == 1) == 0) {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            } else {
                                if((mapping2[_arg0][2] == 0) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            }
                        } else {
                            if((mapping2[_arg0][2] == 1) == 0) {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            } else {
                                if((mapping2[_arg0][2] == 0) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            }
                        }
                    } else {
                        if((mapping2[_arg0][2] == 0) == 0) {
                            if((mapping2[_arg0][2] == 1) == 0) {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            } else {
                                if((mapping2[_arg0][2] == 0) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            }
                        } else {
                            if((mapping2[_arg0][2] == 1) == 0) {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            } else {
                                if((mapping2[_arg0][2] == 0) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            }
                        }
                    }
                }
            } else {
                if(mapping5[_arg0] >= storage[13]) {
                    if(initTime <= block.timestamp) {
                        require(storage[17]);
                        if(((block.timestamp - initTime) / storage[17]) >= 6) {
                            if(((block.timestamp - initTime) / storage[17]) >= 6) {
                                ifstorage[2c] {
                                    if(var11 <= 0) {
                                        require((186a0 * (a ** decimals)));
                                        require((30d40 * (a ** decimals)));
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    } else {
                                        require((186a0 * (a ** decimals)));
                                        require((30d40 * (a ** decimals)));
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    }
                                } else {
                                    if(storage[2c] == 0) {
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    } else {
                                        require(storage[15]);
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    }
                                }
                            } else {
                                require((((block.timestamp - initTime) / storage[17]) < 6));
                                if(storage[2c] == 0) {
                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                } else {
                                    require(storage[15]);
                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                }
                            }
                        } else {
                            require(storage[16]);
                            if((totalSale / storage[16]) <= ((block.timestamp - initTime) / storage[17])) {
                                if(((block.timestamp - initTime) / storage[17]) >= 6) {
                                    ifstorage[2c] {
                                        if(var11 <= 0) {
                                            require((186a0 * (a ** decimals)));
                                            require((30d40 * (a ** decimals)));
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        } else {
                                            require((186a0 * (a ** decimals)));
                                            require((30d40 * (a ** decimals)));
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        }
                                    } else {
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    }
                                } else {
                                    require((((block.timestamp - initTime) / storage[17]) < 6));
                                    if(storage[2c] == 0) {
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    } else {
                                        require(storage[15]);
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    }
                                }
                            } else {
                                if((totalSale / storage[16]) >= 6) {
                                    ifstorage[2c] {
                                        if(var11 <= 0) {
                                            require((186a0 * (a ** decimals)));
                                            require((30d40 * (a ** decimals)));
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        } else {
                                            require((186a0 * (a ** decimals)));
                                            require((30d40 * (a ** decimals)));
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        }
                                    } else {
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    }
                                } else {
                                    require(((totalSale / storage[16]) < 6));
                                    if(storage[2c] == 0) {
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[((totalSale / storage[16]) + 18)];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    } else {
                                        require(storage[15]);
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[((totalSale / storage[16]) + 18)];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    }
                                }
                            }
                        }
                    } else {
                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = 8c379a000000000000000000000000000000000000000000000000000000000;
                        memory[(4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = ((20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))) - (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))));
                        memory[(20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 13;
                        memory[(20 + (20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = 536166654d61746820737562206661696c656400000000000000000000000000;
                        revert(memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))]);
                    }
                } else {
                    if(mapping2[_arg0][1] <= 0) {
                        if(mapping2[_arg0][1] <= 0) {
                            if((mapping2[_arg0][2] == 1) == 0) {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            } else {
                                if((mapping2[_arg0][2] == 0) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            }
                        } else {
                            if((mapping2[_arg0][2] == 1) == 0) {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            } else {
                                if((mapping2[_arg0][2] == 0) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            }
                        }
                    } else {
                        if((mapping2[_arg0][2] == 0) == 0) {
                            if((mapping2[_arg0][2] == 1) == 0) {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            } else {
                                if((mapping2[_arg0][2] == 0) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            }
                        } else {
                            if((mapping2[_arg0][2] == 1) == 0) {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            } else {
                                if((mapping2[_arg0][2] == 0) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            }
                        }
                    }
                }
            }
        }
    } else {
        if((3a0 + (20 * mapping3[storage[13]][9])) > 3c0) {
            if((3a0 + (20 * mapping3[storage[13]][9])) > 3e0) goto(1a6e);
            memory[(380 + (20 + (20 * mapping3[storage[13]][9])))] = mapping3[storage[13]][10];
            if(mapping3[storage[13]][10] == 0) {
                if(mapping5[_arg0] >= storage[13]) {
                    if(initTime <= block.timestamp) {
                        require(storage[17]);
                        if(((block.timestamp - initTime) / storage[17]) >= 6) {
                            if(((block.timestamp - initTime) / storage[17]) >= 6) {
                                ifstorage[2c] {
                                    if(var11 <= 0) {
                                        require((186a0 * (a ** decimals)));
                                        require((30d40 * (a ** decimals)));
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    } else {
                                        require((186a0 * (a ** decimals)));
                                        require((30d40 * (a ** decimals)));
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    }
                                } else {
                                    if(storage[2c] == 0) {
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    } else {
                                        require(storage[15]);
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    }
                                }
                            } else {
                                require((((block.timestamp - initTime) / storage[17]) < 6));
                                if(storage[2c] == 0) {
                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                } else {
                                    require(storage[15]);
                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                }
                            }
                        } else {
                            require(storage[16]);
                            if((totalSale / storage[16]) <= ((block.timestamp - initTime) / storage[17])) {
                                if(((block.timestamp - initTime) / storage[17]) >= 6) {
                                    ifstorage[2c] {
                                        if(var11 <= 0) {
                                            require((186a0 * (a ** decimals)));
                                            require((30d40 * (a ** decimals)));
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        } else {
                                            require((186a0 * (a ** decimals)));
                                            require((30d40 * (a ** decimals)));
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        }
                                    } else {
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    }
                                } else {
                                    require((((block.timestamp - initTime) / storage[17]) < 6));
                                    if(storage[2c] == 0) {
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    } else {
                                        require(storage[15]);
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    }
                                }
                            } else {
                                if((totalSale / storage[16]) >= 6) {
                                    ifstorage[2c] {
                                        if(var11 <= 0) {
                                            require((186a0 * (a ** decimals)));
                                            require((30d40 * (a ** decimals)));
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        } else {
                                            require((186a0 * (a ** decimals)));
                                            require((30d40 * (a ** decimals)));
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        }
                                    } else {
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    }
                                } else {
                                    require(((totalSale / storage[16]) < 6));
                                    if(storage[2c] == 0) {
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[((totalSale / storage[16]) + 18)];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    } else {
                                        require(storage[15]);
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[((totalSale / storage[16]) + 18)];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    }
                                }
                            }
                        }
                    } else {
                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = 8c379a000000000000000000000000000000000000000000000000000000000;
                        memory[(4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = ((20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))) - (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))));
                        memory[(20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 13;
                        memory[(20 + (20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = 536166654d61746820737562206661696c656400000000000000000000000000;
                        revert(memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))]);
                    }
                } else {
                    if(mapping2[_arg0][1] <= 0) {
                        if(mapping2[_arg0][1] <= 0) {
                            if((mapping2[_arg0][2] == 1) == 0) {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            } else {
                                if((mapping2[_arg0][2] == 0) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            }
                        } else {
                            if((mapping2[_arg0][2] == 1) == 0) {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            } else {
                                if((mapping2[_arg0][2] == 0) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            }
                        }
                    } else {
                        if((mapping2[_arg0][2] == 0) == 0) {
                            if((mapping2[_arg0][2] == 1) == 0) {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            } else {
                                if((mapping2[_arg0][2] == 0) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            }
                        } else {
                            if((mapping2[_arg0][2] == 1) == 0) {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            } else {
                                if((mapping2[_arg0][2] == 0) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            }
                        }
                    }
                }
            } else {
                memory[(20 + (380 + (20 + (20 * mapping3[storage[13]][9]))))] = storage[keccak256((keccak256(storage[13], 21) + a))];
                if(((20 + (380 + (20 + (20 * mapping3[storage[13]][9])))) + (20 * mapping3[storage[13]][10])) > (20 + (20 + (380 + (20 + (20 * mapping3[storage[13]][9])))))) {
                    memory[(20 + (20 + (380 + (20 + (20 * mapping3[storage[13]][9])))))] = storage[(1 + keccak256((keccak256(storage[13], 21) + a)))];
                    if(((20 + (380 + (20 + (20 * mapping3[storage[13]][9])))) + (20 * mapping3[storage[13]][10])) > (20 + (20 + (20 + (380 + (20 + (20 * mapping3[storage[13]][9]))))))) goto(1ac6);
                    if(mapping5[_arg0] >= storage[13]) {
                        if(initTime <= block.timestamp) {
                            require(storage[17]);
                            if(((block.timestamp - initTime) / storage[17]) >= 6) {
                                if(((block.timestamp - initTime) / storage[17]) >= 6) {
                                    ifstorage[2c] {
                                        if(var11 <= 0) {
                                            require((186a0 * (a ** decimals)));
                                            require((30d40 * (a ** decimals)));
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        } else {
                                            require((186a0 * (a ** decimals)));
                                            require((30d40 * (a ** decimals)));
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        }
                                    } else {
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    }
                                } else {
                                    require((((block.timestamp - initTime) / storage[17]) < 6));
                                    if(storage[2c] == 0) {
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    } else {
                                        require(storage[15]);
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    }
                                }
                            } else {
                                require(storage[16]);
                                if((totalSale / storage[16]) <= ((block.timestamp - initTime) / storage[17])) {
                                    if(((block.timestamp - initTime) / storage[17]) >= 6) {
                                        ifstorage[2c] {
                                            if(var11 <= 0) {
                                                require((186a0 * (a ** decimals)));
                                                require((30d40 * (a ** decimals)));
                                                if(storage[2c] == 0) {
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                } else {
                                                    require(storage[15]);
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                }
                                            } else {
                                                require((186a0 * (a ** decimals)));
                                                require((30d40 * (a ** decimals)));
                                                if(storage[2c] == 0) {
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                } else {
                                                    require(storage[15]);
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                }
                                            }
                                        } else {
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        }
                                    } else {
                                        require((((block.timestamp - initTime) / storage[17]) < 6));
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    }
                                } else {
                                    if((totalSale / storage[16]) >= 6) {
                                        ifstorage[2c] {
                                            if(var11 <= 0) {
                                                require((186a0 * (a ** decimals)));
                                                require((30d40 * (a ** decimals)));
                                                if(storage[2c] == 0) {
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                } else {
                                                    require(storage[15]);
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                }
                                            } else {
                                                require((186a0 * (a ** decimals)));
                                                require((30d40 * (a ** decimals)));
                                                if(storage[2c] == 0) {
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                } else {
                                                    require(storage[15]);
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                }
                                            }
                                        } else {
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        }
                                    } else {
                                        require(((totalSale / storage[16]) < 6));
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[((totalSale / storage[16]) + 18)];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[((totalSale / storage[16]) + 18)];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    }
                                }
                            }
                        } else {
                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = 8c379a000000000000000000000000000000000000000000000000000000000;
                            memory[(4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = ((20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))) - (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))));
                            memory[(20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 13;
                            memory[(20 + (20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = 536166654d61746820737562206661696c656400000000000000000000000000;
                            revert(memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))]);
                        }
                    } else {
                        if(mapping2[_arg0][1] <= 0) {
                            if(mapping2[_arg0][1] <= 0) {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((mapping2[_arg0][2] == 1) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                } else {
                                    if((mapping2[_arg0][2] == 0) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                }
                            } else {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((mapping2[_arg0][2] == 1) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                } else {
                                    if((mapping2[_arg0][2] == 0) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                }
                            }
                        } else {
                            if((mapping2[_arg0][2] == 0) == 0) {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((mapping2[_arg0][2] == 1) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                } else {
                                    if((mapping2[_arg0][2] == 0) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                }
                            } else {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((mapping2[_arg0][2] == 1) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                } else {
                                    if((mapping2[_arg0][2] == 0) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if(mapping5[_arg0] >= storage[13]) {
                        if(initTime <= block.timestamp) {
                            require(storage[17]);
                            if(((block.timestamp - initTime) / storage[17]) >= 6) {
                                if(((block.timestamp - initTime) / storage[17]) >= 6) {
                                    ifstorage[2c] {
                                        if(var11 <= 0) {
                                            require((186a0 * (a ** decimals)));
                                            require((30d40 * (a ** decimals)));
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        } else {
                                            require((186a0 * (a ** decimals)));
                                            require((30d40 * (a ** decimals)));
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        }
                                    } else {
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    }
                                } else {
                                    require((((block.timestamp - initTime) / storage[17]) < 6));
                                    if(storage[2c] == 0) {
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    } else {
                                        require(storage[15]);
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    }
                                }
                            } else {
                                require(storage[16]);
                                if((totalSale / storage[16]) <= ((block.timestamp - initTime) / storage[17])) {
                                    if(((block.timestamp - initTime) / storage[17]) >= 6) {
                                        ifstorage[2c] {
                                            if(var11 <= 0) {
                                                require((186a0 * (a ** decimals)));
                                                require((30d40 * (a ** decimals)));
                                                if(storage[2c] == 0) {
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                } else {
                                                    require(storage[15]);
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                }
                                            } else {
                                                require((186a0 * (a ** decimals)));
                                                require((30d40 * (a ** decimals)));
                                                if(storage[2c] == 0) {
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                } else {
                                                    require(storage[15]);
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                }
                                            }
                                        } else {
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        }
                                    } else {
                                        require((((block.timestamp - initTime) / storage[17]) < 6));
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    }
                                } else {
                                    if((totalSale / storage[16]) >= 6) {
                                        ifstorage[2c] {
                                            if(var11 <= 0) {
                                                require((186a0 * (a ** decimals)));
                                                require((30d40 * (a ** decimals)));
                                                if(storage[2c] == 0) {
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                } else {
                                                    require(storage[15]);
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                }
                                            } else {
                                                require((186a0 * (a ** decimals)));
                                                require((30d40 * (a ** decimals)));
                                                if(storage[2c] == 0) {
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                } else {
                                                    require(storage[15]);
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                }
                                            }
                                        } else {
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        }
                                    } else {
                                        require(((totalSale / storage[16]) < 6));
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[((totalSale / storage[16]) + 18)];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[((totalSale / storage[16]) + 18)];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    }
                                }
                            }
                        } else {
                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = 8c379a000000000000000000000000000000000000000000000000000000000;
                            memory[(4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = ((20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))) - (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))));
                            memory[(20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 13;
                            memory[(20 + (20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = 536166654d61746820737562206661696c656400000000000000000000000000;
                            revert(memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))]);
                        }
                    } else {
                        if(mapping2[_arg0][1] <= 0) {
                            if(mapping2[_arg0][1] <= 0) {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((mapping2[_arg0][2] == 1) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                } else {
                                    if((mapping2[_arg0][2] == 0) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                }
                            } else {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((mapping2[_arg0][2] == 1) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                } else {
                                    if((mapping2[_arg0][2] == 0) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                }
                            }
                        } else {
                            if((mapping2[_arg0][2] == 0) == 0) {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((mapping2[_arg0][2] == 1) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                } else {
                                    if((mapping2[_arg0][2] == 0) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                }
                            } else {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((mapping2[_arg0][2] == 1) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                } else {
                                    if((mapping2[_arg0][2] == 0) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } else {
            memory[(380 + (20 + (20 * mapping3[storage[13]][9])))] = mapping3[storage[13]][10];
            if(mapping3[storage[13]][10] == 0) {
                if(mapping5[_arg0] >= storage[13]) {
                    if(initTime <= block.timestamp) {
                        require(storage[17]);
                        if(((block.timestamp - initTime) / storage[17]) >= 6) {
                            if(((block.timestamp - initTime) / storage[17]) >= 6) {
                                ifstorage[2c] {
                                    if(var11 <= 0) {
                                        require((186a0 * (a ** decimals)));
                                        require((30d40 * (a ** decimals)));
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    } else {
                                        require((186a0 * (a ** decimals)));
                                        require((30d40 * (a ** decimals)));
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    }
                                } else {
                                    if(storage[2c] == 0) {
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    } else {
                                        require(storage[15]);
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    }
                                }
                            } else {
                                require((((block.timestamp - initTime) / storage[17]) < 6));
                                if(storage[2c] == 0) {
                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                } else {
                                    require(storage[15]);
                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                }
                            }
                        } else {
                            require(storage[16]);
                            if((totalSale / storage[16]) <= ((block.timestamp - initTime) / storage[17])) {
                                if(((block.timestamp - initTime) / storage[17]) >= 6) {
                                    ifstorage[2c] {
                                        if(var11 <= 0) {
                                            require((186a0 * (a ** decimals)));
                                            require((30d40 * (a ** decimals)));
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        } else {
                                            require((186a0 * (a ** decimals)));
                                            require((30d40 * (a ** decimals)));
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        }
                                    } else {
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    }
                                } else {
                                    require((((block.timestamp - initTime) / storage[17]) < 6));
                                    if(storage[2c] == 0) {
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    } else {
                                        require(storage[15]);
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    }
                                }
                            } else {
                                if((totalSale / storage[16]) >= 6) {
                                    ifstorage[2c] {
                                        if(var11 <= 0) {
                                            require((186a0 * (a ** decimals)));
                                            require((30d40 * (a ** decimals)));
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        } else {
                                            require((186a0 * (a ** decimals)));
                                            require((30d40 * (a ** decimals)));
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        }
                                    } else {
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    }
                                } else {
                                    require(((totalSale / storage[16]) < 6));
                                    if(storage[2c] == 0) {
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[((totalSale / storage[16]) + 18)];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    } else {
                                        require(storage[15]);
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[((totalSale / storage[16]) + 18)];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    }
                                }
                            }
                        }
                    } else {
                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = 8c379a000000000000000000000000000000000000000000000000000000000;
                        memory[(4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = ((20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))) - (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))));
                        memory[(20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 13;
                        memory[(20 + (20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = 536166654d61746820737562206661696c656400000000000000000000000000;
                        revert(memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))]);
                    }
                } else {
                    if(mapping2[_arg0][1] <= 0) {
                        if(mapping2[_arg0][1] <= 0) {
                            if((mapping2[_arg0][2] == 1) == 0) {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            } else {
                                if((mapping2[_arg0][2] == 0) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            }
                        } else {
                            if((mapping2[_arg0][2] == 1) == 0) {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            } else {
                                if((mapping2[_arg0][2] == 0) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            }
                        }
                    } else {
                        if((mapping2[_arg0][2] == 0) == 0) {
                            if((mapping2[_arg0][2] == 1) == 0) {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            } else {
                                if((mapping2[_arg0][2] == 0) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            }
                        } else {
                            if((mapping2[_arg0][2] == 1) == 0) {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            } else {
                                if((mapping2[_arg0][2] == 0) == 0) {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                } else {
                                    if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                    if(mapping2[_arg0][1] <= 0) goto(3824);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                    if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                    if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                    goto(37ad);
                                }
                            }
                        }
                    }
                }
            } else {
                memory[(20 + (380 + (20 + (20 * mapping3[storage[13]][9]))))] = storage[keccak256((keccak256(storage[13], 21) + a))];
                if(((20 + (380 + (20 + (20 * mapping3[storage[13]][9])))) + (20 * mapping3[storage[13]][10])) > (20 + (20 + (380 + (20 + (20 * mapping3[storage[13]][9])))))) {
                    memory[(20 + (20 + (380 + (20 + (20 * mapping3[storage[13]][9])))))] = storage[(1 + keccak256((keccak256(storage[13], 21) + a)))];
                    if(((20 + (380 + (20 + (20 * mapping3[storage[13]][9])))) + (20 * mapping3[storage[13]][10])) > (20 + (20 + (20 + (380 + (20 + (20 * mapping3[storage[13]][9]))))))) goto(1ac6);
                    if(mapping5[_arg0] >= storage[13]) {
                        if(initTime <= block.timestamp) {
                            require(storage[17]);
                            if(((block.timestamp - initTime) / storage[17]) >= 6) {
                                if(((block.timestamp - initTime) / storage[17]) >= 6) {
                                    ifstorage[2c] {
                                        if(var11 <= 0) {
                                            require((186a0 * (a ** decimals)));
                                            require((30d40 * (a ** decimals)));
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        } else {
                                            require((186a0 * (a ** decimals)));
                                            require((30d40 * (a ** decimals)));
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        }
                                    } else {
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    }
                                } else {
                                    require((((block.timestamp - initTime) / storage[17]) < 6));
                                    if(storage[2c] == 0) {
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    } else {
                                        require(storage[15]);
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    }
                                }
                            } else {
                                require(storage[16]);
                                if((totalSale / storage[16]) <= ((block.timestamp - initTime) / storage[17])) {
                                    if(((block.timestamp - initTime) / storage[17]) >= 6) {
                                        ifstorage[2c] {
                                            if(var11 <= 0) {
                                                require((186a0 * (a ** decimals)));
                                                require((30d40 * (a ** decimals)));
                                                if(storage[2c] == 0) {
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                } else {
                                                    require(storage[15]);
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                }
                                            } else {
                                                require((186a0 * (a ** decimals)));
                                                require((30d40 * (a ** decimals)));
                                                if(storage[2c] == 0) {
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                } else {
                                                    require(storage[15]);
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                }
                                            }
                                        } else {
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        }
                                    } else {
                                        require((((block.timestamp - initTime) / storage[17]) < 6));
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    }
                                } else {
                                    if((totalSale / storage[16]) >= 6) {
                                        ifstorage[2c] {
                                            if(var11 <= 0) {
                                                require((186a0 * (a ** decimals)));
                                                require((30d40 * (a ** decimals)));
                                                if(storage[2c] == 0) {
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                } else {
                                                    require(storage[15]);
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                }
                                            } else {
                                                require((186a0 * (a ** decimals)));
                                                require((30d40 * (a ** decimals)));
                                                if(storage[2c] == 0) {
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                } else {
                                                    require(storage[15]);
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                }
                                            }
                                        } else {
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        }
                                    } else {
                                        require(((totalSale / storage[16]) < 6));
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[((totalSale / storage[16]) + 18)];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[((totalSale / storage[16]) + 18)];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    }
                                }
                            }
                        } else {
                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = 8c379a000000000000000000000000000000000000000000000000000000000;
                            memory[(4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = ((20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))) - (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))));
                            memory[(20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 13;
                            memory[(20 + (20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = 536166654d61746820737562206661696c656400000000000000000000000000;
                            revert(memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))]);
                        }
                    } else {
                        if(mapping2[_arg0][1] <= 0) {
                            if(mapping2[_arg0][1] <= 0) {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((mapping2[_arg0][2] == 1) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                } else {
                                    if((mapping2[_arg0][2] == 0) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                }
                            } else {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((mapping2[_arg0][2] == 1) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                } else {
                                    if((mapping2[_arg0][2] == 0) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                }
                            }
                        } else {
                            if((mapping2[_arg0][2] == 0) == 0) {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((mapping2[_arg0][2] == 1) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                } else {
                                    if((mapping2[_arg0][2] == 0) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                }
                            } else {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((mapping2[_arg0][2] == 1) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                } else {
                                    if((mapping2[_arg0][2] == 0) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if(mapping5[_arg0] >= storage[13]) {
                        if(initTime <= block.timestamp) {
                            require(storage[17]);
                            if(((block.timestamp - initTime) / storage[17]) >= 6) {
                                if(((block.timestamp - initTime) / storage[17]) >= 6) {
                                    ifstorage[2c] {
                                        if(var11 <= 0) {
                                            require((186a0 * (a ** decimals)));
                                            require((30d40 * (a ** decimals)));
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        } else {
                                            require((186a0 * (a ** decimals)));
                                            require((30d40 * (a ** decimals)));
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        }
                                    } else {
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    }
                                } else {
                                    require((((block.timestamp - initTime) / storage[17]) < 6));
                                    if(storage[2c] == 0) {
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    } else {
                                        require(storage[15]);
                                        memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                        memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                        memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                        memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                        memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                        memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                        memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                        return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                    }
                                }
                            } else {
                                require(storage[16]);
                                if((totalSale / storage[16]) <= ((block.timestamp - initTime) / storage[17])) {
                                    if(((block.timestamp - initTime) / storage[17]) >= 6) {
                                        ifstorage[2c] {
                                            if(var11 <= 0) {
                                                require((186a0 * (a ** decimals)));
                                                require((30d40 * (a ** decimals)));
                                                if(storage[2c] == 0) {
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                } else {
                                                    require(storage[15]);
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                }
                                            } else {
                                                require((186a0 * (a ** decimals)));
                                                require((30d40 * (a ** decimals)));
                                                if(storage[2c] == 0) {
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                } else {
                                                    require(storage[15]);
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                }
                                            }
                                        } else {
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        }
                                    } else {
                                        require((((block.timestamp - initTime) / storage[17]) < 6));
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    }
                                } else {
                                    if((totalSale / storage[16]) >= 6) {
                                        ifstorage[2c] {
                                            if(var11 <= 0) {
                                                require((186a0 * (a ** decimals)));
                                                require((30d40 * (a ** decimals)));
                                                if(storage[2c] == 0) {
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                } else {
                                                    require(storage[15]);
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                }
                                            } else {
                                                require((186a0 * (a ** decimals)));
                                                require((30d40 * (a ** decimals)));
                                                if(storage[2c] == 0) {
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                } else {
                                                    require(storage[15]);
                                                    memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                    memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                    memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                    memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                    memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                    memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                    memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                    return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                                }
                                            }
                                        } else {
                                            if(storage[2c] == 0) {
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            } else {
                                                require(storage[15]);
                                                memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                                memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                                memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                                memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                                memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                                memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[1d];
                                                memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                                return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                            }
                                        }
                                    } else {
                                        require(((totalSale / storage[16]) < 6));
                                        if(storage[2c] == 0) {
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[((totalSale / storage[16]) + 18)];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = 0;
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        } else {
                                            require(storage[15]);
                                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = storage[13];
                                            memory[(20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = mapping3[storage[13]][6];
                                            memory[(20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 0;
                                            memory[(20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = totalBurn;
                                            memory[(20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))] = totalSale;
                                            memory[(20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))))] = storage[((totalSale / storage[16]) + 18)];
                                            memory[(20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))] = (((totalSale - storage[2d]) / storage[15]) + 1);
                                            return memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (20 + (20 + (20 + (20 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))];
                                        }
                                    }
                                }
                            }
                        } else {
                            memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))] = 8c379a000000000000000000000000000000000000000000000000000000000;
                            memory[(4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))] = ((20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))) - (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))));
                            memory[(20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))] = 13;
                            memory[(20 + (20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))] = 536166654d61746820737562206661696c656400000000000000000000000000;
                            revert(memory[((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))):(((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))+((20 + (20 + (20 + (4 + ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10]))))))) - ((380 + (20 + (20 * mapping3[storage[13]][9]))) + (20 + (20 * mapping3[storage[13]][10])))))]);
                        }
                    } else {
                        if(mapping2[_arg0][1] <= 0) {
                            if(mapping2[_arg0][1] <= 0) {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((mapping2[_arg0][2] == 1) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                } else {
                                    if((mapping2[_arg0][2] == 0) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                }
                            } else {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((mapping2[_arg0][2] == 1) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                } else {
                                    if((mapping2[_arg0][2] == 0) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                }
                            }
                        } else {
                            if((mapping2[_arg0][2] == 0) == 0) {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((mapping2[_arg0][2] == 1) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                } else {
                                    if((mapping2[_arg0][2] == 0) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                }
                            } else {
                                if((mapping2[_arg0][2] == 1) == 0) {
                                    if((mapping2[_arg0][2] == 1) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                } else {
                                    if((mapping2[_arg0][2] == 0) == 0) {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    } else {
                                        if((1 + mapping5[_arg0]) >= storage[13]) goto(3912);
                                        if(mapping2[_arg0][1] <= 0) goto(3824);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3856);
                                        if((mapping2[_arg0][2] == 1) == 0) goto(38d6);
                                        if((mapping2[_arg0][2] == 0) == 0) goto(3905);
                                        goto(37ad);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

function 1b42df33() public view {
    return(var11);
}

function transferFrom(address _arg0, address _arg1, uint256 _arg2) public returns (uint256) {
    require(((msg.data.length - 4) >= 60));
    require((_arg2 <= mapping1[_arg0]));
    if(_arg2 <= mapping1[_arg0]) {
        mapping1[_arg0] -= _arg2;
        require(((_arg1 == 0) == 0));
        require((mapping1[_arg0] >= _arg2));
        require(((mapping1[_arg1] + _arg2) > mapping1[_arg1]));
        mapping1[_arg0] -= _arg2;
        mapping1[this] = (mapping1[this] + ((_arg2 * 2) / 64));
        mapping1[_arg1] = (mapping1[_arg1] + (_arg2 - ((_arg2 * 2) / 64)));
        emit Transfer(_arg0, _arg1, _arg2 - ((_arg2 * 2) / 64))
        emit Transfer(_arg0, this, (_arg2 * 2) / 64)
        require((((mapping1[_arg0] + mapping1[_arg1]) + ((_arg2 * 2) / 64)) == (mapping1[_arg0] + mapping1[_arg1])));
        return 1;
    } else {
        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
    }
}

function 24d5c4c1() public {
    require(((msg.data.length - 4) >= 20));
    require((msg.sender == dev));
    var16 = ((_arg0 * 1) || (-100 && var16));
    return;
}

function 271292f5() public returns (uint256) {
    require(((msg.data.length - 4) >= 40));
    if(msg.sender == var6) {
        require((mapping1[_arg0] >= _arg1));
        mapping1[_arg0] -= _arg1;
        totalSupply -= _arg1;
        totalBurn = (totalBurn + _arg1);
        emit Burn(_arg0, _arg1)
        return 1;
    } else {
        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
    }
}

function 29038e0c() public {
    require(((msg.data.length - 4) >= 40));
    if(msg.sender == var6) {
        if(initTime <= block.timestamp) {
            require(storage[17]);
            if(((block.timestamp - initTime) / storage[17]) >= 6) {
                if(((block.timestamp - initTime) / storage[17]) >= 6) {
                    ifstorage[2c] {
                        if(var11 <= 0) {
                            require((186a0 * (a ** decimals)));
                            require((30d40 * (a ** decimals)));
                            if((_arg1 == 0) == 0) {
                                require(_arg1);
                                if(((_arg1 * (((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / _arg1) == (((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) {
                                    require(((var6 == 0) == 0));
                                    require((mapping1[_arg0] >= ((_arg1 * (((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / e8d4a51000)));
                                    require(((mapping1[var6] + ((_arg1 * (((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / e8d4a51000)) > mapping1[var6]));
                                    mapping1[_arg0] -= ((_arg1 * (((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / e8d4a51000);
                                    mapping1[var6] = (mapping1[var6] + ((_arg1 * (((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / e8d4a51000));
                                    emit Transfer(_arg0, var6, (_arg1 * (((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / e8d4a51000)
                                    require((((mapping1[_arg0] + mapping1[var6]) + mapping1[var7]) == ((mapping1[_arg0] + mapping1[var6]) + mapping1[var7])));
                                    return;
                                } else {
                                    revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
                                }
                            } else {
                                require(((var6 == 0) == 0));
                                require((mapping1[_arg0] >= 0));
                                require((mapping1[var6] > mapping1[var6]));
                                mapping1[_arg0] -= 0;
                                mapping1[var6] = mapping1[var6];
                                emit Transfer(_arg0, var6, 0)
                                require((((mapping1[_arg0] + mapping1[var6]) + mapping1[var7]) == ((mapping1[_arg0] + mapping1[var6]) + mapping1[var7])));
                                return;
                            }
                        } else {
                            require((186a0 * (a ** decimals)));
                            require((30d40 * (a ** decimals)));
                            if((_arg1 == 0) == 0) {
                                require(_arg1);
                                if(((_arg1 * (((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / _arg1) == (((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) {
                                    require(((var6 == 0) == 0));
                                    require((mapping1[_arg0] >= ((_arg1 * (((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / e8d4a51000)));
                                    require(((mapping1[var6] + ((_arg1 * (((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / e8d4a51000)) > mapping1[var6]));
                                    mapping1[_arg0] -= ((_arg1 * (((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / e8d4a51000);
                                    mapping1[var6] = (mapping1[var6] + ((_arg1 * (((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / e8d4a51000));
                                    emit Transfer(_arg0, var6, (_arg1 * (((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / e8d4a51000)
                                    require((((mapping1[_arg0] + mapping1[var6]) + mapping1[var7]) == ((mapping1[_arg0] + mapping1[var6]) + mapping1[var7])));
                                    return;
                                } else {
                                    revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
                                }
                            } else {
                                require(((var6 == 0) == 0));
                                require((mapping1[_arg0] >= 0));
                                require((mapping1[var6] > mapping1[var6]));
                                mapping1[_arg0] -= 0;
                                mapping1[var6] = mapping1[var6];
                                emit Transfer(_arg0, var6, 0)
                                require((((mapping1[_arg0] + mapping1[var6]) + mapping1[var7]) == ((mapping1[_arg0] + mapping1[var6]) + mapping1[var7])));
                                return;
                            }
                        }
                    } else {
                        if((_arg1 == 0) == 0) {
                            require(_arg1);
                            if(((_arg1 * (storage[1d] * 3)) / _arg1) == (storage[1d] * 3)) {
                                require(((var6 == 0) == 0));
                                require((mapping1[_arg0] >= ((_arg1 * (storage[1d] * 3)) / e8d4a51000)));
                                require(((mapping1[var6] + ((_arg1 * (storage[1d] * 3)) / e8d4a51000)) > mapping1[var6]));
                                mapping1[_arg0] -= ((_arg1 * (storage[1d] * 3)) / e8d4a51000);
                                mapping1[var6] = (mapping1[var6] + ((_arg1 * (storage[1d] * 3)) / e8d4a51000));
                                emit Transfer(_arg0, var6, (_arg1 * (storage[1d] * 3)) / e8d4a51000)
                                require((((mapping1[_arg0] + mapping1[var6]) + mapping1[var7]) == ((mapping1[_arg0] + mapping1[var6]) + mapping1[var7])));
                                return;
                            } else {
                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
                            }
                        } else {
                            require(((var6 == 0) == 0));
                            require((mapping1[_arg0] >= 0));
                            require((mapping1[var6] > mapping1[var6]));
                            mapping1[_arg0] -= 0;
                            mapping1[var6] = mapping1[var6];
                            emit Transfer(_arg0, var6, 0)
                            require((((mapping1[_arg0] + mapping1[var6]) + mapping1[var7]) == ((mapping1[_arg0] + mapping1[var6]) + mapping1[var7])));
                            return;
                        }
                    }
                } else {
                    require((((block.timestamp - initTime) / storage[17]) < 6));
                    if((_arg1 == 0) == 0) {
                        require(_arg1);
                        if(((_arg1 * (storage[(((block.timestamp - initTime) / storage[17]) + 18)] * 3)) / _arg1) == (storage[(((block.timestamp - initTime) / storage[17]) + 18)] * 3)) {
                            require(((var6 == 0) == 0));
                            require((mapping1[_arg0] >= ((_arg1 * (storage[(((block.timestamp - initTime) / storage[17]) + 18)] * 3)) / e8d4a51000)));
                            require(((mapping1[var6] + ((_arg1 * (storage[(((block.timestamp - initTime) / storage[17]) + 18)] * 3)) / e8d4a51000)) > mapping1[var6]));
                            mapping1[_arg0] -= ((_arg1 * (storage[(((block.timestamp - initTime) / storage[17]) + 18)] * 3)) / e8d4a51000);
                            mapping1[var6] = (mapping1[var6] + ((_arg1 * (storage[(((block.timestamp - initTime) / storage[17]) + 18)] * 3)) / e8d4a51000));
                            emit Transfer(_arg0, var6, (_arg1 * (storage[(((block.timestamp - initTime) / storage[17]) + 18)] * 3)) / e8d4a51000)
                            require((((mapping1[_arg0] + mapping1[var6]) + mapping1[var7]) == ((mapping1[_arg0] + mapping1[var6]) + mapping1[var7])));
                            return;
                        } else {
                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
                        }
                    } else {
                        require(((var6 == 0) == 0));
                        require((mapping1[_arg0] >= 0));
                        require((mapping1[var6] > mapping1[var6]));
                        mapping1[_arg0] -= 0;
                        mapping1[var6] = mapping1[var6];
                        emit Transfer(_arg0, var6, 0)
                        require((((mapping1[_arg0] + mapping1[var6]) + mapping1[var7]) == ((mapping1[_arg0] + mapping1[var6]) + mapping1[var7])));
                        return;
                    }
                }
            } else {
                require(storage[16]);
                if((totalSale / storage[16]) <= ((block.timestamp - initTime) / storage[17])) {
                    if(((block.timestamp - initTime) / storage[17]) >= 6) {
                        ifstorage[2c] {
                            if(var11 <= 0) {
                                require((186a0 * (a ** decimals)));
                                require((30d40 * (a ** decimals)));
                                if((_arg1 == 0) == 0) {
                                    require(_arg1);
                                    if(((_arg1 * (((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / _arg1) == (((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) {
                                        require(((var6 == 0) == 0));
                                        require((mapping1[_arg0] >= ((_arg1 * (((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / e8d4a51000)));
                                        require(((mapping1[var6] + ((_arg1 * (((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / e8d4a51000)) > mapping1[var6]));
                                        mapping1[_arg0] -= ((_arg1 * (((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / e8d4a51000);
                                        mapping1[var6] = (mapping1[var6] + ((_arg1 * (((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / e8d4a51000));
                                        emit Transfer(_arg0, var6, (_arg1 * (((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / e8d4a51000)
                                        require((((mapping1[_arg0] + mapping1[var6]) + mapping1[var7]) == ((mapping1[_arg0] + mapping1[var6]) + mapping1[var7])));
                                        return;
                                    } else {
                                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
                                    }
                                } else {
                                    require(((var6 == 0) == 0));
                                    require((mapping1[_arg0] >= 0));
                                    require((mapping1[var6] > mapping1[var6]));
                                    mapping1[_arg0] -= 0;
                                    mapping1[var6] = mapping1[var6];
                                    emit Transfer(_arg0, var6, 0)
                                    require((((mapping1[_arg0] + mapping1[var6]) + mapping1[var7]) == ((mapping1[_arg0] + mapping1[var6]) + mapping1[var7])));
                                    return;
                                }
                            } else {
                                require((186a0 * (a ** decimals)));
                                require((30d40 * (a ** decimals)));
                                if((_arg1 == 0) == 0) {
                                    require(_arg1);
                                    if(((_arg1 * (((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / _arg1) == (((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) {
                                        require(((var6 == 0) == 0));
                                        require((mapping1[_arg0] >= ((_arg1 * (((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / e8d4a51000)));
                                        require(((mapping1[var6] + ((_arg1 * (((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / e8d4a51000)) > mapping1[var6]));
                                        mapping1[_arg0] -= ((_arg1 * (((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / e8d4a51000);
                                        mapping1[var6] = (mapping1[var6] + ((_arg1 * (((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / e8d4a51000));
                                        emit Transfer(_arg0, var6, (_arg1 * (((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / e8d4a51000)
                                        require((((mapping1[_arg0] + mapping1[var6]) + mapping1[var7]) == ((mapping1[_arg0] + mapping1[var6]) + mapping1[var7])));
                                        return;
                                    } else {
                                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
                                    }
                                } else {
                                    require(((var6 == 0) == 0));
                                    require((mapping1[_arg0] >= 0));
                                    require((mapping1[var6] > mapping1[var6]));
                                    mapping1[_arg0] -= 0;
                                    mapping1[var6] = mapping1[var6];
                                    emit Transfer(_arg0, var6, 0)
                                    require((((mapping1[_arg0] + mapping1[var6]) + mapping1[var7]) == ((mapping1[_arg0] + mapping1[var6]) + mapping1[var7])));
                                    return;
                                }
                            }
                        } else {
                            if((_arg1 == 0) == 0) {
                                require(_arg1);
                                if(((_arg1 * (storage[1d] * 3)) / _arg1) == (storage[1d] * 3)) {
                                    require(((var6 == 0) == 0));
                                    require((mapping1[_arg0] >= ((_arg1 * (storage[1d] * 3)) / e8d4a51000)));
                                    require(((mapping1[var6] + ((_arg1 * (storage[1d] * 3)) / e8d4a51000)) > mapping1[var6]));
                                    mapping1[_arg0] -= ((_arg1 * (storage[1d] * 3)) / e8d4a51000);
                                    mapping1[var6] = (mapping1[var6] + ((_arg1 * (storage[1d] * 3)) / e8d4a51000));
                                    emit Transfer(_arg0, var6, (_arg1 * (storage[1d] * 3)) / e8d4a51000)
                                    require((((mapping1[_arg0] + mapping1[var6]) + mapping1[var7]) == ((mapping1[_arg0] + mapping1[var6]) + mapping1[var7])));
                                    return;
                                } else {
                                    revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
                                }
                            } else {
                                require(((var6 == 0) == 0));
                                require((mapping1[_arg0] >= 0));
                                require((mapping1[var6] > mapping1[var6]));
                                mapping1[_arg0] -= 0;
                                mapping1[var6] = mapping1[var6];
                                emit Transfer(_arg0, var6, 0)
                                require((((mapping1[_arg0] + mapping1[var6]) + mapping1[var7]) == ((mapping1[_arg0] + mapping1[var6]) + mapping1[var7])));
                                return;
                            }
                        }
                    } else {
                        require((((block.timestamp - initTime) / storage[17]) < 6));
                        if((_arg1 == 0) == 0) {
                            require(_arg1);
                            if(((_arg1 * (storage[(((block.timestamp - initTime) / storage[17]) + 18)] * 3)) / _arg1) == (storage[(((block.timestamp - initTime) / storage[17]) + 18)] * 3)) {
                                require(((var6 == 0) == 0));
                                require((mapping1[_arg0] >= ((_arg1 * (storage[(((block.timestamp - initTime) / storage[17]) + 18)] * 3)) / e8d4a51000)));
                                require(((mapping1[var6] + ((_arg1 * (storage[(((block.timestamp - initTime) / storage[17]) + 18)] * 3)) / e8d4a51000)) > mapping1[var6]));
                                mapping1[_arg0] -= ((_arg1 * (storage[(((block.timestamp - initTime) / storage[17]) + 18)] * 3)) / e8d4a51000);
                                mapping1[var6] = (mapping1[var6] + ((_arg1 * (storage[(((block.timestamp - initTime) / storage[17]) + 18)] * 3)) / e8d4a51000));
                                emit Transfer(_arg0, var6, (_arg1 * (storage[(((block.timestamp - initTime) / storage[17]) + 18)] * 3)) / e8d4a51000)
                                require((((mapping1[_arg0] + mapping1[var6]) + mapping1[var7]) == ((mapping1[_arg0] + mapping1[var6]) + mapping1[var7])));
                                return;
                            } else {
                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
                            }
                        } else {
                            require(((var6 == 0) == 0));
                            require((mapping1[_arg0] >= 0));
                            require((mapping1[var6] > mapping1[var6]));
                            mapping1[_arg0] -= 0;
                            mapping1[var6] = mapping1[var6];
                            emit Transfer(_arg0, var6, 0)
                            require((((mapping1[_arg0] + mapping1[var6]) + mapping1[var7]) == ((mapping1[_arg0] + mapping1[var6]) + mapping1[var7])));
                            return;
                        }
                    }
                } else {
                    if((totalSale / storage[16]) >= 6) {
                        ifstorage[2c] {
                            if(var11 <= 0) {
                                require((186a0 * (a ** decimals)));
                                require((30d40 * (a ** decimals)));
                                if((_arg1 == 0) == 0) {
                                    require(_arg1);
                                    if(((_arg1 * (((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / _arg1) == (((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) {
                                        require(((var6 == 0) == 0));
                                        require((mapping1[_arg0] >= ((_arg1 * (((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / e8d4a51000)));
                                        require(((mapping1[var6] + ((_arg1 * (((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / e8d4a51000)) > mapping1[var6]));
                                        mapping1[_arg0] -= ((_arg1 * (((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / e8d4a51000);
                                        mapping1[var6] = (mapping1[var6] + ((_arg1 * (((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / e8d4a51000));
                                        emit Transfer(_arg0, var6, (_arg1 * (((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / e8d4a51000)
                                        require((((mapping1[_arg0] + mapping1[var6]) + mapping1[var7]) == ((mapping1[_arg0] + mapping1[var6]) + mapping1[var7])));
                                        return;
                                    } else {
                                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
                                    }
                                } else {
                                    require(((var6 == 0) == 0));
                                    require((mapping1[_arg0] >= 0));
                                    require((mapping1[var6] > mapping1[var6]));
                                    mapping1[_arg0] -= 0;
                                    mapping1[var6] = mapping1[var6];
                                    emit Transfer(_arg0, var6, 0)
                                    require((((mapping1[_arg0] + mapping1[var6]) + mapping1[var7]) == ((mapping1[_arg0] + mapping1[var6]) + mapping1[var7])));
                                    return;
                                }
                            } else {
                                require((186a0 * (a ** decimals)));
                                require((30d40 * (a ** decimals)));
                                if((_arg1 == 0) == 0) {
                                    require(_arg1);
                                    if(((_arg1 * (((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / _arg1) == (((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) {
                                        require(((var6 == 0) == 0));
                                        require((mapping1[_arg0] >= ((_arg1 * (((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / e8d4a51000)));
                                        require(((mapping1[var6] + ((_arg1 * (((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / e8d4a51000)) > mapping1[var6]));
                                        mapping1[_arg0] -= ((_arg1 * (((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / e8d4a51000);
                                        mapping1[var6] = (mapping1[var6] + ((_arg1 * (((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / e8d4a51000));
                                        emit Transfer(_arg0, var6, (_arg1 * (((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64)) * 3)) / e8d4a51000)
                                        require((((mapping1[_arg0] + mapping1[var6]) + mapping1[var7]) == ((mapping1[_arg0] + mapping1[var6]) + mapping1[var7])));
                                        return;
                                    } else {
                                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
                                    }
                                } else {
                                    require(((var6 == 0) == 0));
                                    require((mapping1[_arg0] >= 0));
                                    require((mapping1[var6] > mapping1[var6]));
                                    mapping1[_arg0] -= 0;
                                    mapping1[var6] = mapping1[var6];
                                    emit Transfer(_arg0, var6, 0)
                                    require((((mapping1[_arg0] + mapping1[var6]) + mapping1[var7]) == ((mapping1[_arg0] + mapping1[var6]) + mapping1[var7])));
                                    return;
                                }
                            }
                        } else {
                            if((_arg1 == 0) == 0) {
                                require(_arg1);
                                if(((_arg1 * (storage[1d] * 3)) / _arg1) == (storage[1d] * 3)) {
                                    require(((var6 == 0) == 0));
                                    require((mapping1[_arg0] >= ((_arg1 * (storage[1d] * 3)) / e8d4a51000)));
                                    require(((mapping1[var6] + ((_arg1 * (storage[1d] * 3)) / e8d4a51000)) > mapping1[var6]));
                                    mapping1[_arg0] -= ((_arg1 * (storage[1d] * 3)) / e8d4a51000);
                                    mapping1[var6] = (mapping1[var6] + ((_arg1 * (storage[1d] * 3)) / e8d4a51000));
                                    emit Transfer(_arg0, var6, (_arg1 * (storage[1d] * 3)) / e8d4a51000)
                                    require((((mapping1[_arg0] + mapping1[var6]) + mapping1[var7]) == ((mapping1[_arg0] + mapping1[var6]) + mapping1[var7])));
                                    return;
                                } else {
                                    revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
                                }
                            } else {
                                require(((var6 == 0) == 0));
                                require((mapping1[_arg0] >= 0));
                                require((mapping1[var6] > mapping1[var6]));
                                mapping1[_arg0] -= 0;
                                mapping1[var6] = mapping1[var6];
                                emit Transfer(_arg0, var6, 0)
                                require((((mapping1[_arg0] + mapping1[var6]) + mapping1[var7]) == ((mapping1[_arg0] + mapping1[var6]) + mapping1[var7])));
                                return;
                            }
                        }
                    } else {
                        require(((totalSale / storage[16]) < 6));
                        if((_arg1 == 0) == 0) {
                            require(_arg1);
                            if(((_arg1 * (storage[((totalSale / storage[16]) + 18)] * 3)) / _arg1) == (storage[((totalSale / storage[16]) + 18)] * 3)) {
                                require(((var6 == 0) == 0));
                                require((mapping1[_arg0] >= ((_arg1 * (storage[((totalSale / storage[16]) + 18)] * 3)) / e8d4a51000)));
                                require(((mapping1[var6] + ((_arg1 * (storage[((totalSale / storage[16]) + 18)] * 3)) / e8d4a51000)) > mapping1[var6]));
                                mapping1[_arg0] -= ((_arg1 * (storage[((totalSale / storage[16]) + 18)] * 3)) / e8d4a51000);
                                mapping1[var6] = (mapping1[var6] + ((_arg1 * (storage[((totalSale / storage[16]) + 18)] * 3)) / e8d4a51000));
                                emit Transfer(_arg0, var6, (_arg1 * (storage[((totalSale / storage[16]) + 18)] * 3)) / e8d4a51000)
                                require((((mapping1[_arg0] + mapping1[var6]) + mapping1[var7]) == ((mapping1[_arg0] + mapping1[var6]) + mapping1[var7])));
                                return;
                            } else {
                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
                            }
                        } else {
                            require(((var6 == 0) == 0));
                            require((mapping1[_arg0] >= 0));
                            require((mapping1[var6] > mapping1[var6]));
                            mapping1[_arg0] -= 0;
                            mapping1[var6] = mapping1[var6];
                            emit Transfer(_arg0, var6, 0)
                            require((((mapping1[_arg0] + mapping1[var6]) + mapping1[var7]) == ((mapping1[_arg0] + mapping1[var6]) + mapping1[var7])));
                            return;
                        }
                    }
                }
            }
        } else {
            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
        }
    } else {
        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
    }
}

function 2eb23541() public view {
    return(storage[2d]);
}

function 40f436d9() public view {
    return(var6);
}

function burn(uint256 _arg0) public {
    require(((msg.data.length - 4) >= 20));
    require((mapping1[msg.sender] >= _arg0));
    if(_arg0 <= mapping1[msg.sender]) {
        mapping1[msg.sender] -= _arg0;
        if(_arg0 <= totalSupply) goto(377b);
        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
    } else {
        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
    }
}

function 543996f0() public payable {
    require(((msg.data.length - 4) >= 40));
    if((address(msg.sender).code.length) == 0) {
        if(_arg0 >= storage[10]) {
            if(_arg0 <= storage[11]) {
                if(mapping4[storage[13]][11] == 0) {
                    if(_arg1 <= 2540be400) {
                        require(((var6 == 0) == 0));
                        require((mapping1[msg.sender] >= (((_arg0 * 5a) * (a ** decimals)) / 64)));
                        require(((mapping1[var6] + (((_arg0 * 5a) * (a ** decimals)) / 64)) > mapping1[var6]));
                        mapping1[msg.sender] -= (((_arg0 * 5a) * (a ** decimals)) / 64);
                        mapping1[var6] = (mapping1[var6] + (((_arg0 * 5a) * (a ** decimals)) / 64));
                        emit Transfer(msg.sender, var6, ((_arg0 * 5a) * (a ** decimals)) / 64)
                        require((((mapping1[msg.sender] + mapping1[var6]) + mapping1[var7]) == ((mapping1[msg.sender] + mapping1[var6]) + mapping1[var7])));
                        require((mapping1[msg.sender] >= (((_arg0 * a) * (a ** decimals)) / 64)));
                        if((((_arg0 * a) * (a ** decimals)) / 64) <= mapping1[msg.sender]) {
                            mapping1[msg.sender] -= (((_arg0 * a) * (a ** decimals)) / 64);
                            if((((_arg0 * a) * (a ** decimals)) / 64) <= totalSupply) goto(377b);
                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
                        } else {
                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
                        }
                    } else {
                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
                    }
                } else {
                    revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
                }
            } else {
                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
            }
        } else {
            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
        }
    } else {
        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
    }
}

function 60cbf00a() public {
    require(((msg.data.length - 4) >= 20));
    return(mapping6[_arg0]);
}

function 645cf903() public view {
    return(storage[2c]);
}

function 6ec9a425() public {
    require(((msg.data.length - 4) >= 20));
    require((_arg0 < 6));
    return(storage[(_arg0 + 18)]);
}

function balanceOf(address _arg0) public {
    require(((msg.data.length - 4) >= 20));
    return(mapping1[_arg0]);
}

function setGameAddress(address _arg0) public {
    require(((msg.data.length - 4) >= 20));
    require((msg.sender == owner));
    var6 = ((_arg0 * 1) || (-10000000000000000000000000000000000000000 && var6));
    var3 = ((_arg0 * 1) || (-10000000000000000000000000000000000000000 && var3));
    return;
}

function 87c3dff2() public {
    require(((msg.data.length - 4) >= 40));
    return(mapping5[_arg0]);
}

function 90f28102() public {
    require(((msg.data.length - 4) >= 40));
    if(mapping4[_arg0][9] == 0) {
        memory[(3e0 + (20 + (20 * mapping4[_arg0][9])))] = mapping4[_arg0][10];
        if(mapping4[_arg0][10] == 0) {
            memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)] = mapping4[_arg0][1];
            memory[(20 + (((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60))] = mapping4[_arg0][2];
            memory[(20 + (20 + (((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)))] = mapping4[_arg0][3];
            memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60)] = 60;
            memory[(20 + ((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60))] = 0;
            memory[(20 + (20 + ((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60)))] = 0;
            memory[(20 + (20 + (20 + ((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60))))] = 0;
            memory[((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)] = mapping3[_arg1];
            if(mapping3[_arg1] == 0) {
                memory[(((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)] = ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80);
                memory[(20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))] = mapping3[_arg1][1];
                memory[(20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)))] = mapping3[_arg1][2];
                memory[(20 + (20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))))] = (mapping3[_arg1][2] / 100);
                memory[(((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))] = _arg0;
                memory[(20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))] = mapping4[_arg0][6];
                memory[(20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))] = mapping4[_arg0][11];
                memory[(20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))))] = (memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)]);
                memory[((20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))) + 20)] = (memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 20)]);
                goto(b97);
            } else {
                memory[(20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80))] = mapping3[_arg1];
                if(((20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)) + (20 * mapping3[_arg1])) > (20 + (20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)))) {
                    memory[(20 + (20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)))] = mapping3[_arg1][1];
                    if(((20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)) + (20 * mapping3[_arg1])) > (20 + (20 + (20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80))))) goto(2aac);
                    memory[(((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)] = ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80);
                    memory[(20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))] = mapping3[_arg1][1];
                    memory[(20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)))] = mapping3[_arg1][2];
                    memory[(20 + (20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))))] = (mapping3[_arg1][2] / 100);
                    memory[(((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))] = _arg0;
                    memory[(20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))] = mapping4[_arg0][6];
                    memory[(20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))] = mapping4[_arg0][11];
                    memory[(20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))))] = (memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)]);
                    memory[((20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))) + 20)] = (memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 20)]);
                    goto(b97);
                } else {
                    memory[(((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)] = ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80);
                    memory[(20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))] = mapping3[_arg1][1];
                    memory[(20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)))] = mapping3[_arg1][2];
                    memory[(20 + (20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))))] = (mapping3[_arg1][2] / 100);
                    memory[(((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))] = _arg0;
                    memory[(20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))] = mapping4[_arg0][6];
                    memory[(20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))] = mapping4[_arg0][11];
                    memory[(20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))))] = (memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)]);
                    memory[((20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))) + 20)] = (memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 20)]);
                    goto(b97);
                }
            }
        } else {
            memory[(20 + (3e0 + (20 + (20 * mapping4[_arg0][9]))))] = storage[keccak256((keccak256(_arg0, 21) + a))];
            if(((20 + (3e0 + (20 + (20 * mapping4[_arg0][9])))) + (20 * mapping4[_arg0][10])) > (20 + (20 + (3e0 + (20 + (20 * mapping4[_arg0][9])))))) {
                memory[(20 + (20 + (3e0 + (20 + (20 * mapping4[_arg0][9])))))] = storage[(1 + keccak256((keccak256(_arg0, 21) + a)))];
                if(((20 + (3e0 + (20 + (20 * mapping4[_arg0][9])))) + (20 * mapping4[_arg0][10])) > (20 + (20 + (20 + (3e0 + (20 + (20 * mapping4[_arg0][9]))))))) goto(29cd);
                memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)] = mapping4[_arg0][1];
                memory[(20 + (((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60))] = mapping4[_arg0][2];
                memory[(20 + (20 + (((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)))] = mapping4[_arg0][3];
                memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60)] = 60;
                memory[(20 + ((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60))] = 0;
                memory[(20 + (20 + ((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60)))] = 0;
                memory[(20 + (20 + (20 + ((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60))))] = 0;
                memory[((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)] = mapping3[_arg1];
                if(mapping3[_arg1] == 0) {
                    memory[(((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)] = ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80);
                    memory[(20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))] = mapping3[_arg1][1];
                    memory[(20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)))] = mapping3[_arg1][2];
                    memory[(20 + (20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))))] = (mapping3[_arg1][2] / 100);
                    memory[(((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))] = _arg0;
                    memory[(20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))] = mapping4[_arg0][6];
                    memory[(20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))] = mapping4[_arg0][11];
                    memory[(20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))))] = (memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)]);
                    memory[((20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))) + 20)] = (memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 20)]);
                    goto(b97);
                } else {
                    memory[(20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80))] = mapping3[_arg1];
                    if(((20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)) + (20 * mapping3[_arg1])) > (20 + (20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)))) {
                        memory[(20 + (20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)))] = mapping3[_arg1][1];
                        if(((20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)) + (20 * mapping3[_arg1])) > (20 + (20 + (20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80))))) goto(2aac);
                        memory[(((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)] = ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80);
                        memory[(20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))] = mapping3[_arg1][1];
                        memory[(20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)))] = mapping3[_arg1][2];
                        memory[(20 + (20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))))] = (mapping3[_arg1][2] / 100);
                        memory[(((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))] = _arg0;
                        memory[(20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))] = mapping4[_arg0][6];
                        memory[(20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))] = mapping4[_arg0][11];
                        memory[(20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))))] = (memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)]);
                        memory[((20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))) + 20)] = (memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 20)]);
                        goto(b97);
                    } else {
                        memory[(((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)] = ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80);
                        memory[(20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))] = mapping3[_arg1][1];
                        memory[(20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)))] = mapping3[_arg1][2];
                        memory[(20 + (20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))))] = (mapping3[_arg1][2] / 100);
                        memory[(((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))] = _arg0;
                        memory[(20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))] = mapping4[_arg0][6];
                        memory[(20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))] = mapping4[_arg0][11];
                        memory[(20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))))] = (memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)]);
                        memory[((20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))) + 20)] = (memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 20)]);
                        goto(b97);
                    }
                }
            } else {
                memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)] = mapping4[_arg0][1];
                memory[(20 + (((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60))] = mapping4[_arg0][2];
                memory[(20 + (20 + (((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)))] = mapping4[_arg0][3];
                memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60)] = 60;
                memory[(20 + ((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60))] = 0;
                memory[(20 + (20 + ((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60)))] = 0;
                memory[(20 + (20 + (20 + ((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60))))] = 0;
                memory[((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)] = mapping3[_arg1];
                if(mapping3[_arg1] == 0) {
                    memory[(((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)] = ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80);
                    memory[(20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))] = mapping3[_arg1][1];
                    memory[(20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)))] = mapping3[_arg1][2];
                    memory[(20 + (20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))))] = (mapping3[_arg1][2] / 100);
                    memory[(((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))] = _arg0;
                    memory[(20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))] = mapping4[_arg0][6];
                    memory[(20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))] = mapping4[_arg0][11];
                    memory[(20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))))] = (memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)]);
                    memory[((20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))) + 20)] = (memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 20)]);
                    goto(b97);
                } else {
                    memory[(20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80))] = mapping3[_arg1];
                    if(((20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)) + (20 * mapping3[_arg1])) > (20 + (20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)))) {
                        memory[(20 + (20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)))] = mapping3[_arg1][1];
                        if(((20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)) + (20 * mapping3[_arg1])) > (20 + (20 + (20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80))))) goto(2aac);
                        memory[(((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)] = ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80);
                        memory[(20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))] = mapping3[_arg1][1];
                        memory[(20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)))] = mapping3[_arg1][2];
                        memory[(20 + (20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))))] = (mapping3[_arg1][2] / 100);
                        memory[(((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))] = _arg0;
                        memory[(20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))] = mapping4[_arg0][6];
                        memory[(20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))] = mapping4[_arg0][11];
                        memory[(20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))))] = (memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)]);
                        memory[((20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))) + 20)] = (memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 20)]);
                        goto(b97);
                    } else {
                        memory[(((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)] = ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80);
                        memory[(20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))] = mapping3[_arg1][1];
                        memory[(20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)))] = mapping3[_arg1][2];
                        memory[(20 + (20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))))] = (mapping3[_arg1][2] / 100);
                        memory[(((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))] = _arg0;
                        memory[(20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))] = mapping4[_arg0][6];
                        memory[(20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))] = mapping4[_arg0][11];
                        memory[(20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))))] = (memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)]);
                        memory[((20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))) + 20)] = (memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 20)]);
                        goto(b97);
                    }
                }
            }
        }
    } else {
        if((400 + (20 * mapping4[_arg0][9])) > 420) {
            if((400 + (20 * mapping4[_arg0][9])) > 440) goto(2975);
            memory[(3e0 + (20 + (20 * mapping4[_arg0][9])))] = mapping4[_arg0][10];
            if(mapping4[_arg0][10] == 0) {
                memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)] = mapping4[_arg0][1];
                memory[(20 + (((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60))] = mapping4[_arg0][2];
                memory[(20 + (20 + (((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)))] = mapping4[_arg0][3];
                memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60)] = 60;
                memory[(20 + ((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60))] = 0;
                memory[(20 + (20 + ((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60)))] = 0;
                memory[(20 + (20 + (20 + ((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60))))] = 0;
                memory[((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)] = mapping3[_arg1];
                if(mapping3[_arg1] == 0) {
                    memory[(((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)] = ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80);
                    memory[(20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))] = mapping3[_arg1][1];
                    memory[(20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)))] = mapping3[_arg1][2];
                    memory[(20 + (20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))))] = (mapping3[_arg1][2] / 100);
                    memory[(((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))] = _arg0;
                    memory[(20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))] = mapping4[_arg0][6];
                    memory[(20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))] = mapping4[_arg0][11];
                    memory[(20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))))] = (memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)]);
                    memory[((20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))) + 20)] = (memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 20)]);
                    goto(b97);
                } else {
                    memory[(20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80))] = mapping3[_arg1];
                    if(((20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)) + (20 * mapping3[_arg1])) > (20 + (20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)))) {
                        memory[(20 + (20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)))] = mapping3[_arg1][1];
                        if(((20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)) + (20 * mapping3[_arg1])) > (20 + (20 + (20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80))))) goto(2aac);
                        memory[(((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)] = ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80);
                        memory[(20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))] = mapping3[_arg1][1];
                        memory[(20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)))] = mapping3[_arg1][2];
                        memory[(20 + (20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))))] = (mapping3[_arg1][2] / 100);
                        memory[(((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))] = _arg0;
                        memory[(20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))] = mapping4[_arg0][6];
                        memory[(20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))] = mapping4[_arg0][11];
                        memory[(20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))))] = (memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)]);
                        memory[((20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))) + 20)] = (memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 20)]);
                        goto(b97);
                    } else {
                        memory[(((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)] = ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80);
                        memory[(20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))] = mapping3[_arg1][1];
                        memory[(20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)))] = mapping3[_arg1][2];
                        memory[(20 + (20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))))] = (mapping3[_arg1][2] / 100);
                        memory[(((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))] = _arg0;
                        memory[(20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))] = mapping4[_arg0][6];
                        memory[(20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))] = mapping4[_arg0][11];
                        memory[(20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))))] = (memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)]);
                        memory[((20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))) + 20)] = (memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 20)]);
                        goto(b97);
                    }
                }
            } else {
                memory[(20 + (3e0 + (20 + (20 * mapping4[_arg0][9]))))] = storage[keccak256((keccak256(_arg0, 21) + a))];
                if(((20 + (3e0 + (20 + (20 * mapping4[_arg0][9])))) + (20 * mapping4[_arg0][10])) > (20 + (20 + (3e0 + (20 + (20 * mapping4[_arg0][9])))))) {
                    memory[(20 + (20 + (3e0 + (20 + (20 * mapping4[_arg0][9])))))] = storage[(1 + keccak256((keccak256(_arg0, 21) + a)))];
                    if(((20 + (3e0 + (20 + (20 * mapping4[_arg0][9])))) + (20 * mapping4[_arg0][10])) > (20 + (20 + (20 + (3e0 + (20 + (20 * mapping4[_arg0][9]))))))) goto(29cd);
                    memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)] = mapping4[_arg0][1];
                    memory[(20 + (((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60))] = mapping4[_arg0][2];
                    memory[(20 + (20 + (((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)))] = mapping4[_arg0][3];
                    memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60)] = 60;
                    memory[(20 + ((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60))] = 0;
                    memory[(20 + (20 + ((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60)))] = 0;
                    memory[(20 + (20 + (20 + ((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60))))] = 0;
                    memory[((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)] = mapping3[_arg1];
                    if(mapping3[_arg1] == 0) {
                        memory[(((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)] = ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80);
                        memory[(20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))] = mapping3[_arg1][1];
                        memory[(20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)))] = mapping3[_arg1][2];
                        memory[(20 + (20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))))] = (mapping3[_arg1][2] / 100);
                        memory[(((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))] = _arg0;
                        memory[(20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))] = mapping4[_arg0][6];
                        memory[(20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))] = mapping4[_arg0][11];
                        memory[(20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))))] = (memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)]);
                        memory[((20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))) + 20)] = (memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 20)]);
                        goto(b97);
                    } else {
                        memory[(20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80))] = mapping3[_arg1];
                        if(((20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)) + (20 * mapping3[_arg1])) > (20 + (20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)))) {
                            memory[(20 + (20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)))] = mapping3[_arg1][1];
                            if(((20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)) + (20 * mapping3[_arg1])) > (20 + (20 + (20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80))))) goto(2aac);
                            memory[(((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)] = ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80);
                            memory[(20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))] = mapping3[_arg1][1];
                            memory[(20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)))] = mapping3[_arg1][2];
                            memory[(20 + (20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))))] = (mapping3[_arg1][2] / 100);
                            memory[(((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))] = _arg0;
                            memory[(20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))] = mapping4[_arg0][6];
                            memory[(20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))] = mapping4[_arg0][11];
                            memory[(20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))))] = (memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)]);
                            memory[((20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))) + 20)] = (memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 20)]);
                            goto(b97);
                        } else {
                            memory[(((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)] = ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80);
                            memory[(20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))] = mapping3[_arg1][1];
                            memory[(20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)))] = mapping3[_arg1][2];
                            memory[(20 + (20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))))] = (mapping3[_arg1][2] / 100);
                            memory[(((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))] = _arg0;
                            memory[(20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))] = mapping4[_arg0][6];
                            memory[(20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))] = mapping4[_arg0][11];
                            memory[(20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))))] = (memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)]);
                            memory[((20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))) + 20)] = (memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 20)]);
                            goto(b97);
                        }
                    }
                } else {
                    memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)] = mapping4[_arg0][1];
                    memory[(20 + (((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60))] = mapping4[_arg0][2];
                    memory[(20 + (20 + (((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)))] = mapping4[_arg0][3];
                    memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60)] = 60;
                    memory[(20 + ((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60))] = 0;
                    memory[(20 + (20 + ((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60)))] = 0;
                    memory[(20 + (20 + (20 + ((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60))))] = 0;
                    memory[((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)] = mapping3[_arg1];
                    if(mapping3[_arg1] == 0) {
                        memory[(((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)] = ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80);
                        memory[(20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))] = mapping3[_arg1][1];
                        memory[(20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)))] = mapping3[_arg1][2];
                        memory[(20 + (20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))))] = (mapping3[_arg1][2] / 100);
                        memory[(((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))] = _arg0;
                        memory[(20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))] = mapping4[_arg0][6];
                        memory[(20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))] = mapping4[_arg0][11];
                        memory[(20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))))] = (memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)]);
                        memory[((20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))) + 20)] = (memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 20)]);
                        goto(b97);
                    } else {
                        memory[(20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80))] = mapping3[_arg1];
                        if(((20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)) + (20 * mapping3[_arg1])) > (20 + (20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)))) {
                            memory[(20 + (20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)))] = mapping3[_arg1][1];
                            if(((20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)) + (20 * mapping3[_arg1])) > (20 + (20 + (20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80))))) goto(2aac);
                            memory[(((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)] = ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80);
                            memory[(20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))] = mapping3[_arg1][1];
                            memory[(20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)))] = mapping3[_arg1][2];
                            memory[(20 + (20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))))] = (mapping3[_arg1][2] / 100);
                            memory[(((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))] = _arg0;
                            memory[(20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))] = mapping4[_arg0][6];
                            memory[(20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))] = mapping4[_arg0][11];
                            memory[(20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))))] = (memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)]);
                            memory[((20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))) + 20)] = (memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 20)]);
                            goto(b97);
                        } else {
                            memory[(((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)] = ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80);
                            memory[(20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))] = mapping3[_arg1][1];
                            memory[(20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)))] = mapping3[_arg1][2];
                            memory[(20 + (20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))))] = (mapping3[_arg1][2] / 100);
                            memory[(((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))] = _arg0;
                            memory[(20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))] = mapping4[_arg0][6];
                            memory[(20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))] = mapping4[_arg0][11];
                            memory[(20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))))] = (memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)]);
                            memory[((20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))) + 20)] = (memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 20)]);
                            goto(b97);
                        }
                    }
                }
            }
        } else {
            memory[(3e0 + (20 + (20 * mapping4[_arg0][9])))] = mapping4[_arg0][10];
            if(mapping4[_arg0][10] == 0) {
                memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)] = mapping4[_arg0][1];
                memory[(20 + (((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60))] = mapping4[_arg0][2];
                memory[(20 + (20 + (((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)))] = mapping4[_arg0][3];
                memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60)] = 60;
                memory[(20 + ((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60))] = 0;
                memory[(20 + (20 + ((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60)))] = 0;
                memory[(20 + (20 + (20 + ((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60))))] = 0;
                memory[((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)] = mapping3[_arg1];
                if(mapping3[_arg1] == 0) {
                    memory[(((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)] = ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80);
                    memory[(20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))] = mapping3[_arg1][1];
                    memory[(20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)))] = mapping3[_arg1][2];
                    memory[(20 + (20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))))] = (mapping3[_arg1][2] / 100);
                    memory[(((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))] = _arg0;
                    memory[(20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))] = mapping4[_arg0][6];
                    memory[(20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))] = mapping4[_arg0][11];
                    memory[(20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))))] = (memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)]);
                    memory[((20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))) + 20)] = (memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 20)]);
                    goto(b97);
                } else {
                    memory[(20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80))] = mapping3[_arg1];
                    if(((20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)) + (20 * mapping3[_arg1])) > (20 + (20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)))) {
                        memory[(20 + (20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)))] = mapping3[_arg1][1];
                        if(((20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)) + (20 * mapping3[_arg1])) > (20 + (20 + (20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80))))) goto(2aac);
                        memory[(((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)] = ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80);
                        memory[(20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))] = mapping3[_arg1][1];
                        memory[(20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)))] = mapping3[_arg1][2];
                        memory[(20 + (20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))))] = (mapping3[_arg1][2] / 100);
                        memory[(((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))] = _arg0;
                        memory[(20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))] = mapping4[_arg0][6];
                        memory[(20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))] = mapping4[_arg0][11];
                        memory[(20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))))] = (memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)]);
                        memory[((20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))) + 20)] = (memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 20)]);
                        goto(b97);
                    } else {
                        memory[(((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)] = ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80);
                        memory[(20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))] = mapping3[_arg1][1];
                        memory[(20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)))] = mapping3[_arg1][2];
                        memory[(20 + (20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))))] = (mapping3[_arg1][2] / 100);
                        memory[(((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))] = _arg0;
                        memory[(20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))] = mapping4[_arg0][6];
                        memory[(20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))] = mapping4[_arg0][11];
                        memory[(20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))))] = (memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)]);
                        memory[((20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))) + 20)] = (memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 20)]);
                        goto(b97);
                    }
                }
            } else {
                memory[(20 + (3e0 + (20 + (20 * mapping4[_arg0][9]))))] = storage[keccak256((keccak256(_arg0, 21) + a))];
                if(((20 + (3e0 + (20 + (20 * mapping4[_arg0][9])))) + (20 * mapping4[_arg0][10])) > (20 + (20 + (3e0 + (20 + (20 * mapping4[_arg0][9])))))) {
                    memory[(20 + (20 + (3e0 + (20 + (20 * mapping4[_arg0][9])))))] = storage[(1 + keccak256((keccak256(_arg0, 21) + a)))];
                    if(((20 + (3e0 + (20 + (20 * mapping4[_arg0][9])))) + (20 * mapping4[_arg0][10])) > (20 + (20 + (20 + (3e0 + (20 + (20 * mapping4[_arg0][9]))))))) goto(29cd);
                    memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)] = mapping4[_arg0][1];
                    memory[(20 + (((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60))] = mapping4[_arg0][2];
                    memory[(20 + (20 + (((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)))] = mapping4[_arg0][3];
                    memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60)] = 60;
                    memory[(20 + ((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60))] = 0;
                    memory[(20 + (20 + ((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60)))] = 0;
                    memory[(20 + (20 + (20 + ((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60))))] = 0;
                    memory[((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)] = mapping3[_arg1];
                    if(mapping3[_arg1] == 0) {
                        memory[(((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)] = ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80);
                        memory[(20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))] = mapping3[_arg1][1];
                        memory[(20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)))] = mapping3[_arg1][2];
                        memory[(20 + (20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))))] = (mapping3[_arg1][2] / 100);
                        memory[(((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))] = _arg0;
                        memory[(20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))] = mapping4[_arg0][6];
                        memory[(20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))] = mapping4[_arg0][11];
                        memory[(20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))))] = (memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)]);
                        memory[((20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))) + 20)] = (memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 20)]);
                        goto(b97);
                    } else {
                        memory[(20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80))] = mapping3[_arg1];
                        if(((20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)) + (20 * mapping3[_arg1])) > (20 + (20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)))) {
                            memory[(20 + (20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)))] = mapping3[_arg1][1];
                            if(((20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)) + (20 * mapping3[_arg1])) > (20 + (20 + (20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80))))) goto(2aac);
                            memory[(((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)] = ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80);
                            memory[(20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))] = mapping3[_arg1][1];
                            memory[(20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)))] = mapping3[_arg1][2];
                            memory[(20 + (20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))))] = (mapping3[_arg1][2] / 100);
                            memory[(((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))] = _arg0;
                            memory[(20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))] = mapping4[_arg0][6];
                            memory[(20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))] = mapping4[_arg0][11];
                            memory[(20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))))] = (memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)]);
                            memory[((20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))) + 20)] = (memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 20)]);
                            goto(b97);
                        } else {
                            memory[(((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)] = ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80);
                            memory[(20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))] = mapping3[_arg1][1];
                            memory[(20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)))] = mapping3[_arg1][2];
                            memory[(20 + (20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))))] = (mapping3[_arg1][2] / 100);
                            memory[(((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))] = _arg0;
                            memory[(20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))] = mapping4[_arg0][6];
                            memory[(20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))] = mapping4[_arg0][11];
                            memory[(20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))))] = (memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)]);
                            memory[((20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))) + 20)] = (memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 20)]);
                            goto(b97);
                        }
                    }
                } else {
                    memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)] = mapping4[_arg0][1];
                    memory[(20 + (((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60))] = mapping4[_arg0][2];
                    memory[(20 + (20 + (((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)))] = mapping4[_arg0][3];
                    memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60)] = 60;
                    memory[(20 + ((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60))] = 0;
                    memory[(20 + (20 + ((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60)))] = 0;
                    memory[(20 + (20 + (20 + ((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60))))] = 0;
                    memory[((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)] = mapping3[_arg1];
                    if(mapping3[_arg1] == 0) {
                        memory[(((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)] = ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80);
                        memory[(20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))] = mapping3[_arg1][1];
                        memory[(20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)))] = mapping3[_arg1][2];
                        memory[(20 + (20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))))] = (mapping3[_arg1][2] / 100);
                        memory[(((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))] = _arg0;
                        memory[(20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))] = mapping4[_arg0][6];
                        memory[(20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))] = mapping4[_arg0][11];
                        memory[(20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))))] = (memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)]);
                        memory[((20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))) + 20)] = (memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 20)]);
                        goto(b97);
                    } else {
                        memory[(20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80))] = mapping3[_arg1];
                        if(((20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)) + (20 * mapping3[_arg1])) > (20 + (20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)))) {
                            memory[(20 + (20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)))] = mapping3[_arg1][1];
                            if(((20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80)) + (20 * mapping3[_arg1])) > (20 + (20 + (20 + ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80))))) goto(2aac);
                            memory[(((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)] = ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80);
                            memory[(20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))] = mapping3[_arg1][1];
                            memory[(20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)))] = mapping3[_arg1][2];
                            memory[(20 + (20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))))] = (mapping3[_arg1][2] / 100);
                            memory[(((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))] = _arg0;
                            memory[(20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))] = mapping4[_arg0][6];
                            memory[(20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))] = mapping4[_arg0][11];
                            memory[(20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))))] = (memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)]);
                            memory[((20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))) + 20)] = (memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 20)]);
                            goto(b97);
                        } else {
                            memory[(((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)] = ((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80);
                            memory[(20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))] = mapping3[_arg1][1];
                            memory[(20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80)))] = mapping3[_arg1][2];
                            memory[(20 + (20 + (20 + (((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80))))] = (mapping3[_arg1][2] / 100);
                            memory[(((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))] = _arg0;
                            memory[(20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))] = mapping4[_arg0][6];
                            memory[(20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))] = mapping4[_arg0][11];
                            memory[(20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1]))))))] = (memory[(((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60)]);
                            memory[((20 + (20 + (20 + (((((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 60) + 80) + 80) + (20 + (20 * mapping3[_arg1])))))) + 20)] = (memory[((((3e0 + (20 + (20 * mapping4[_arg0][9]))) + (20 + (20 * mapping4[_arg0][10]))) + 60) + 20)]);
                            goto(b97);
                        }
                    }
                }
            }
        }
    }
}

function 9514caae() public {
    require(((msg.data.length - 4) >= 80));
    require((msg.sender == dev));
    if(((((msg.data[4:(4+128)];) + (memory[a0])) + (memory[c0])) + (memory[e0])) == 64) {
        var17 = (msg.data[4:(4+128)];);
        var18 = (memory[a0]);
        goto(5ca5);
    } else {
        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
    }
}

function symbol() public {
    if(((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2) == 0) {
        memory[(80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))] = ((20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))) - (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20))));
        memory[(20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20))))] = ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2);
        if(0 >= ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) {
            if((1f && ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) == 0) {
                return memory[(80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20))):((80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))+((((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))))) - (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))))];
            } else {
                memory[((((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))))) - (1f && ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)))] = ((~((100 ** (20 - (1f && ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)))) - 1)) && (memory[((((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))))) - (1f && ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)))]));
                return memory[(80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20))):((80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))+((20 + ((((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))))) - (1f && ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)))) - (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))))];
            }
        } else {
            memory[(20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))))] = (memory[a0]);
            if(20 >= ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) goto(d96);
            memory[((20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20))))) + 20)] = (memory[c0]);
            goto(d7b);
        }
    } else {
        if(1f < ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) {
            if((a0 + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) > c0) {
                if((a0 + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) > e0) goto(2d5f);
                memory[(80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))] = ((20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))) - (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20))));
                memory[(20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20))))] = ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2);
                if(0 >= ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) {
                    if((1f && ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) == 0) {
                        return memory[(80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20))):((80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))+((((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))))) - (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))))];
                    } else {
                        memory[((((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))))) - (1f && ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)))] = ((~((100 ** (20 - (1f && ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)))) - 1)) && (memory[((((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))))) - (1f && ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)))]));
                        return memory[(80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20))):((80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))+((20 + ((((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))))) - (1f && ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)))) - (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))))];
                    }
                } else {
                    memory[(20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))))] = storage[keccak256(4)];
                    if(20 >= ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) goto(d96);
                    memory[((20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20))))) + 20)] = storage[(1 + keccak256(4))];
                    goto(d7b);
                }
            } else {
                memory[(80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))] = ((20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))) - (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20))));
                memory[(20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20))))] = ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2);
                if(0 >= ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) {
                    if((1f && ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) == 0) {
                        return memory[(80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20))):((80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))+((((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))))) - (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))))];
                    } else {
                        memory[((((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))))) - (1f && ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)))] = ((~((100 ** (20 - (1f && ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)))) - 1)) && (memory[((((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))))) - (1f && ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)))]));
                        return memory[(80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20))):((80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))+((20 + ((((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))))) - (1f && ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)))) - (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))))];
                    }
                } else {
                    memory[(20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))))] = storage[keccak256(4)];
                    if(20 >= ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) goto(d96);
                    memory[((20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20))))) + 20)] = (memory[c0]);
                    goto(d7b);
                }
            }
        } else {
            memory[(80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))] = ((20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))) - (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20))));
            memory[(20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20))))] = ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2);
            if(0 >= ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) {
                if((1f && ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) == 0) {
                    return memory[(80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20))):((80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))+((((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))))) - (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))))];
                } else {
                    memory[((((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))))) - (1f && ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)))] = ((~((100 ** (20 - (1f && ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)))) - 1)) && (memory[((((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))))) - (1f && ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)))]));
                    return memory[(80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20))):((80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))+((20 + ((((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2) + (20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))))) - (1f && ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)))) - (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))))];
                }
            } else {
                memory[(20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20)))))] = ((storage[4] / 100) * 100);
                if(20 >= ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) goto(d96);
                memory[((20 + (20 + (80 + (20 + (((1f + ((((100 * ((1 && storage[4]) == 0)) - 1) && storage[4]) / 2)) / 20) * 20))))) + 20)] = (memory[c0]);
                goto(d7b);
            }
        }
    }
}

function 96ba7b6f() public {
    require(((msg.data.length - 4) >= 20));
    return(mapping4[_arg0], mapping4[_arg0][1], mapping4[_arg0][2], mapping4[_arg0][3], mapping4[_arg0][4], mapping4[_arg0][5], mapping4[_arg0][6], mapping4[_arg0][7], mapping4[_arg0][8], mapping4[_arg0][11]);
}

function transfer(address _arg0, uint256 _arg1) public {
    require(((msg.data.length - 4) >= 40));
    require(((_arg0 == 0) == 0));
    require((mapping1[msg.sender] >= _arg1));
    require(((mapping1[_arg0] + _arg1) > mapping1[_arg0]));
    mapping1[msg.sender] -= _arg1;
    mapping1[this] = (mapping1[this] + ((_arg1 * 2) / 64));
    mapping1[_arg0] = (mapping1[_arg0] + (_arg1 - ((_arg1 * 2) / 64)));
    emit Transfer(msg.sender, _arg0, _arg1 - ((_arg1 * 2) / 64))
    emit Transfer(msg.sender, this, (_arg1 * 2) / 64)
    require((((mapping1[msg.sender] + mapping1[_arg0]) + ((_arg1 * 2) / 64)) == (mapping1[msg.sender] + mapping1[_arg0])));
    return;
}

function allocate(address _arg0, uint256 _arg1) public {
    require(((msg.data.length - 4) >= 40));
    require((msg.sender == owner));
    require(((_arg0 == 0) == 0));
    require((mapping1[this] >= _arg1));
    require(((mapping1[_arg0] + _arg1) > mapping1[_arg0]));
    mapping1[this] -= _arg1;
    mapping1[_arg0] = (mapping1[_arg0] + _arg1);
    emit Transfer(this, _arg0, _arg1)
    require((((mapping1[this] + mapping1[_arg0]) + mapping1[var7]) == ((mapping1[this] + mapping1[_arg0]) + mapping1[var7])));
    return;
}

function baba6814() public view {
    return(storage[15]);
}

function c5ecd222() public view {
    return(var13);
}

function c80270e3() public {
    require(((msg.data.length - 4) >= 20));
    return(mapping8[_arg0], mapping8[_arg0][1], mapping8[_arg0][2], mapping8[_arg0][3]);
}

function cdfdfe3f() public {
    require(((msg.data.length - 4) >= 60));
    if(msg.sender == var6) {
        require(((_arg1 == 0) == 0));
        require((mapping1[_arg0] >= _arg2));
        require(((mapping1[_arg1] + _arg2) > mapping1[_arg1]));
        mapping1[_arg0] -= _arg2;
        mapping1[_arg1] = (mapping1[_arg1] + _arg2);
        emit Transfer(_arg0, _arg1, _arg2)
        require((((mapping1[_arg0] + mapping1[_arg1]) + mapping1[var7]) == ((mapping1[_arg0] + mapping1[_arg1]) + mapping1[var7])));
        return;
    } else {
        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
    }
}

function ce506b6c() public view {
    return(var14);
}

function d506d1fb() public view {
    return(storage[16]);
}

function buy(uint256 _arg0) public payable returns (uint256) {
    require(((msg.data.length - 4) >= 20));
    if((address(msg.sender).code.length) == 0) {
        if(msg.value >= 16345785d8a0000) {
            if(msg.value <= 3635c9adc5dea00000) {
                if(_arg0 <= 2540be400) {
                    require((address(var3).code.length));
                    if(call(gasleft(),var3,0,80,44,80,80)) {
                        require((output.length >= 80));
                        if(initTime <= block.timestamp) {
                            require(storage[17]);
                            if(((block.timestamp - initTime) / storage[17]) >= 6) {
                                if(((block.timestamp - initTime) / storage[17]) >= 6) {
                                    ifstorage[2c] {
                                        if(var11 <= 0) {
                                            require((186a0 * (a ** decimals)));
                                            require((30d40 * (a ** decimals)));
                                            if((msg.value == 0) == 0) {
                                                require(msg.value);
                                                if(((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / msg.value) == ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) {
                                                    require(((msg.sender == 0) == 0));
                                                    require((mapping1[this] >= ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400)));
                                                    require(((mapping1[msg.sender] + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400)) > mapping1[msg.sender]));
                                                    mapping1[this] -= ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400);
                                                    mapping1[msg.sender] = (mapping1[msg.sender] + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                    mapping1[this] -= (((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400) / a);
                                                    mapping1[var7] = (mapping1[var7] + (((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400) / a));
                                                    emit Transfer(this, var7, ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400) / a)
                                                    emit Transfer(this, msg.sender, (msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400)
                                                    require((((mapping1[this] + mapping1[msg.sender]) + mapping1[var7]) == ((mapping1[this] + mapping1[msg.sender]) + mapping1[var7])));
                                                    if(var16 == 0) {
                                                        if(0 == var6) {
                                                            if(0 == var7) {
                                                                if(msg.value >= 2b5e3af16b1880000) {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                        require((output.length >= 20));
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                            require((output.length >= 20));
                                                                            var15 += 1;
                                                                            mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                            mapping8[(1 + var15)] = ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400);
                                                                            mapping8[(1 + var15)] = msg.value;
                                                                            mapping8[(1 + var15)] = block.timestamp;
                                                                            totalSale = (totalSale + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                            ifstorage[2c] {
                                                                                if(storage[2c] == 0) {
                                                                                    if(storage[2c] == 0) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        var12 = (var12 + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    var12 = (var12 + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if(initTime <= block.timestamp) goto(377b);
                                                                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                } else {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                        require((output.length >= 20));
                                                                        var15 += 1;
                                                                        mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                        mapping8[(1 + var15)] = ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400);
                                                                        mapping8[(1 + var15)] = msg.value;
                                                                        mapping8[(1 + var15)] = block.timestamp;
                                                                        totalSale = (totalSale + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                        ifstorage[2c] {
                                                                            if(storage[2c] == 0) {
                                                                                if(storage[2c] == 0) {
                                                                                    return 1;
                                                                                } else {
                                                                                    var12 = (var12 + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                var12 = (var12 + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if(initTime <= block.timestamp) goto(377b);
                                                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                }
                                                            } else {
                                                                if((msg.value == 0) == 0) goto(3d2b);
                                                                revert("Invalid instruction (0xfe)");
                                                            }
                                                        } else {
                                                            if((msg.value == 0) == 0) goto(3d2b);
                                                            revert("Invalid instruction (0xfe)");
                                                        }
                                                    } else {
                                                        if(0 == var6) {
                                                            if(0 == var7) {
                                                                if(msg.value >= 2b5e3af16b1880000) {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                        require((output.length >= 20));
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                            require((output.length >= 20));
                                                                            var15 += 1;
                                                                            mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                            mapping8[(1 + var15)] = ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400);
                                                                            mapping8[(1 + var15)] = msg.value;
                                                                            mapping8[(1 + var15)] = block.timestamp;
                                                                            totalSale = (totalSale + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                            ifstorage[2c] {
                                                                                if(storage[2c] == 0) {
                                                                                    if(storage[2c] == 0) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        var12 = (var12 + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    var12 = (var12 + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if(initTime <= block.timestamp) goto(377b);
                                                                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                } else {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                        require((output.length >= 20));
                                                                        var15 += 1;
                                                                        mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                        mapping8[(1 + var15)] = ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400);
                                                                        mapping8[(1 + var15)] = msg.value;
                                                                        mapping8[(1 + var15)] = block.timestamp;
                                                                        totalSale = (totalSale + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                        ifstorage[2c] {
                                                                            if(storage[2c] == 0) {
                                                                                if(storage[2c] == 0) {
                                                                                    return 1;
                                                                                } else {
                                                                                    var12 = (var12 + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                var12 = (var12 + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if(initTime <= block.timestamp) goto(377b);
                                                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                }
                                                            } else {
                                                                if((msg.value == 0) == 0) goto(3d2b);
                                                                revert("Invalid instruction (0xfe)");
                                                            }
                                                        } else {
                                                            if((msg.value == 0) == 0) goto(3d2b);
                                                            revert("Invalid instruction (0xfe)");
                                                        }
                                                    }
                                                } else {
                                                    revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
                                                }
                                            } else {
                                                require(((msg.sender == 0) == 0));
                                                require((mapping1[this] >= 0));
                                                require((mapping1[msg.sender] > mapping1[msg.sender]));
                                                mapping1[this] -= 0;
                                                mapping1[msg.sender] = mapping1[msg.sender];
                                                mapping1[this] -= 0;
                                                mapping1[var7] = mapping1[var7];
                                                emit Transfer(this, var7, 0)
                                                emit Transfer(this, msg.sender, 0)
                                                require((((mapping1[this] + mapping1[msg.sender]) + mapping1[var7]) == ((mapping1[this] + mapping1[msg.sender]) + mapping1[var7])));
                                                if(var16 == 0) {
                                                    if(0 == var6) {
                                                        if(0 == var7) {
                                                            if(msg.value >= 2b5e3af16b1880000) {
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                    require((output.length >= 20));
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                        require((output.length >= 20));
                                                                        var15 += 1;
                                                                        mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                        mapping8[(1 + var15)] = 0;
                                                                        mapping8[(1 + var15)] = msg.value;
                                                                        mapping8[(1 + var15)] = block.timestamp;
                                                                        totalSale = totalSale;
                                                                        ifstorage[2c] {
                                                                            if(storage[2c] == 0) {
                                                                                if(storage[2c] == 0) {
                                                                                    return 1;
                                                                                } else {
                                                                                    var12 = var12;
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                var12 = var12;
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if(initTime <= block.timestamp) goto(377b);
                                                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            } else {
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                    require((output.length >= 20));
                                                                    var15 += 1;
                                                                    mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                    mapping8[(1 + var15)] = 0;
                                                                    mapping8[(1 + var15)] = msg.value;
                                                                    mapping8[(1 + var15)] = block.timestamp;
                                                                    totalSale = totalSale;
                                                                    ifstorage[2c] {
                                                                        if(storage[2c] == 0) {
                                                                            if(storage[2c] == 0) {
                                                                                return 1;
                                                                            } else {
                                                                                var12 = var12;
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            var12 = var12;
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if(initTime <= block.timestamp) goto(377b);
                                                                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            }
                                                        } else {
                                                            if((msg.value == 0) == 0) goto(3d2b);
                                                            goto(3db6);
                                                        }
                                                    } else {
                                                        if((msg.value == 0) == 0) goto(3d2b);
                                                        goto(3db6);
                                                    }
                                                } else {
                                                    if(0 == var6) {
                                                        if(0 == var7) {
                                                            if(msg.value >= 2b5e3af16b1880000) {
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                    require((output.length >= 20));
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                        require((output.length >= 20));
                                                                        var15 += 1;
                                                                        mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                        mapping8[(1 + var15)] = 0;
                                                                        mapping8[(1 + var15)] = msg.value;
                                                                        mapping8[(1 + var15)] = block.timestamp;
                                                                        totalSale = totalSale;
                                                                        ifstorage[2c] {
                                                                            if(storage[2c] == 0) {
                                                                                if(storage[2c] == 0) {
                                                                                    return 1;
                                                                                } else {
                                                                                    var12 = var12;
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                var12 = var12;
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if(initTime <= block.timestamp) goto(377b);
                                                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            } else {
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                    require((output.length >= 20));
                                                                    var15 += 1;
                                                                    mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                    mapping8[(1 + var15)] = 0;
                                                                    mapping8[(1 + var15)] = msg.value;
                                                                    mapping8[(1 + var15)] = block.timestamp;
                                                                    totalSale = totalSale;
                                                                    ifstorage[2c] {
                                                                        if(storage[2c] == 0) {
                                                                            if(storage[2c] == 0) {
                                                                                return 1;
                                                                            } else {
                                                                                var12 = var12;
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            var12 = var12;
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if(initTime <= block.timestamp) goto(377b);
                                                                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            }
                                                        } else {
                                                            if((msg.value == 0) == 0) goto(3d2b);
                                                            goto(3db6);
                                                        }
                                                    } else {
                                                        if((msg.value == 0) == 0) goto(3d2b);
                                                        goto(3db6);
                                                    }
                                                }
                                            }
                                        } else {
                                            require((186a0 * (a ** decimals)));
                                            require((30d40 * (a ** decimals)));
                                            if((msg.value == 0) == 0) {
                                                require(msg.value);
                                                if(((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / msg.value) == ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) {
                                                    require(((msg.sender == 0) == 0));
                                                    require((mapping1[this] >= ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400)));
                                                    require(((mapping1[msg.sender] + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400)) > mapping1[msg.sender]));
                                                    mapping1[this] -= ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400);
                                                    mapping1[msg.sender] = (mapping1[msg.sender] + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                    mapping1[this] -= (((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400) / a);
                                                    mapping1[var7] = (mapping1[var7] + (((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400) / a));
                                                    emit Transfer(this, var7, ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400) / a)
                                                    emit Transfer(this, msg.sender, (msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400)
                                                    require((((mapping1[this] + mapping1[msg.sender]) + mapping1[var7]) == ((mapping1[this] + mapping1[msg.sender]) + mapping1[var7])));
                                                    if(var16 == 0) {
                                                        if(0 == var6) {
                                                            if(0 == var7) {
                                                                if(msg.value >= 2b5e3af16b1880000) {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                        require((output.length >= 20));
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                            require((output.length >= 20));
                                                                            var15 += 1;
                                                                            mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                            mapping8[(1 + var15)] = ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400);
                                                                            mapping8[(1 + var15)] = msg.value;
                                                                            mapping8[(1 + var15)] = block.timestamp;
                                                                            totalSale = (totalSale + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                            ifstorage[2c] {
                                                                                if(storage[2c] == 0) {
                                                                                    if(storage[2c] == 0) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        var12 = (var12 + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    var12 = (var12 + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if(initTime <= block.timestamp) goto(377b);
                                                                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                } else {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                        require((output.length >= 20));
                                                                        var15 += 1;
                                                                        mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                        mapping8[(1 + var15)] = ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400);
                                                                        mapping8[(1 + var15)] = msg.value;
                                                                        mapping8[(1 + var15)] = block.timestamp;
                                                                        totalSale = (totalSale + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                        ifstorage[2c] {
                                                                            if(storage[2c] == 0) {
                                                                                if(storage[2c] == 0) {
                                                                                    return 1;
                                                                                } else {
                                                                                    var12 = (var12 + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                var12 = (var12 + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if(initTime <= block.timestamp) goto(377b);
                                                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                }
                                                            } else {
                                                                if((msg.value == 0) == 0) goto(3d2b);
                                                                revert("Invalid instruction (0xfe)");
                                                            }
                                                        } else {
                                                            if((msg.value == 0) == 0) goto(3d2b);
                                                            revert("Invalid instruction (0xfe)");
                                                        }
                                                    } else {
                                                        if(0 == var6) {
                                                            if(0 == var7) {
                                                                if(msg.value >= 2b5e3af16b1880000) {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                        require((output.length >= 20));
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                            require((output.length >= 20));
                                                                            var15 += 1;
                                                                            mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                            mapping8[(1 + var15)] = ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400);
                                                                            mapping8[(1 + var15)] = msg.value;
                                                                            mapping8[(1 + var15)] = block.timestamp;
                                                                            totalSale = (totalSale + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                            ifstorage[2c] {
                                                                                if(storage[2c] == 0) {
                                                                                    if(storage[2c] == 0) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        var12 = (var12 + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    var12 = (var12 + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if(initTime <= block.timestamp) goto(377b);
                                                                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                } else {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                        require((output.length >= 20));
                                                                        var15 += 1;
                                                                        mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                        mapping8[(1 + var15)] = ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400);
                                                                        mapping8[(1 + var15)] = msg.value;
                                                                        mapping8[(1 + var15)] = block.timestamp;
                                                                        totalSale = (totalSale + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                        ifstorage[2c] {
                                                                            if(storage[2c] == 0) {
                                                                                if(storage[2c] == 0) {
                                                                                    return 1;
                                                                                } else {
                                                                                    var12 = (var12 + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                var12 = (var12 + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if(initTime <= block.timestamp) goto(377b);
                                                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                }
                                                            } else {
                                                                if((msg.value == 0) == 0) goto(3d2b);
                                                                revert("Invalid instruction (0xfe)");
                                                            }
                                                        } else {
                                                            if((msg.value == 0) == 0) goto(3d2b);
                                                            revert("Invalid instruction (0xfe)");
                                                        }
                                                    }
                                                } else {
                                                    revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
                                                }
                                            } else {
                                                require(((msg.sender == 0) == 0));
                                                require((mapping1[this] >= 0));
                                                require((mapping1[msg.sender] > mapping1[msg.sender]));
                                                mapping1[this] -= 0;
                                                mapping1[msg.sender] = mapping1[msg.sender];
                                                mapping1[this] -= 0;
                                                mapping1[var7] = mapping1[var7];
                                                emit Transfer(this, var7, 0)
                                                emit Transfer(this, msg.sender, 0)
                                                require((((mapping1[this] + mapping1[msg.sender]) + mapping1[var7]) == ((mapping1[this] + mapping1[msg.sender]) + mapping1[var7])));
                                                if(var16 == 0) {
                                                    if(0 == var6) {
                                                        if(0 == var7) {
                                                            if(msg.value >= 2b5e3af16b1880000) {
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                    require((output.length >= 20));
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                        require((output.length >= 20));
                                                                        var15 += 1;
                                                                        mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                        mapping8[(1 + var15)] = 0;
                                                                        mapping8[(1 + var15)] = msg.value;
                                                                        mapping8[(1 + var15)] = block.timestamp;
                                                                        totalSale = totalSale;
                                                                        ifstorage[2c] {
                                                                            if(storage[2c] == 0) {
                                                                                if(storage[2c] == 0) {
                                                                                    return 1;
                                                                                } else {
                                                                                    var12 = var12;
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                var12 = var12;
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if(initTime <= block.timestamp) goto(377b);
                                                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            } else {
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                    require((output.length >= 20));
                                                                    var15 += 1;
                                                                    mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                    mapping8[(1 + var15)] = 0;
                                                                    mapping8[(1 + var15)] = msg.value;
                                                                    mapping8[(1 + var15)] = block.timestamp;
                                                                    totalSale = totalSale;
                                                                    ifstorage[2c] {
                                                                        if(storage[2c] == 0) {
                                                                            if(storage[2c] == 0) {
                                                                                return 1;
                                                                            } else {
                                                                                var12 = var12;
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            var12 = var12;
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if(initTime <= block.timestamp) goto(377b);
                                                                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            }
                                                        } else {
                                                            if((msg.value == 0) == 0) goto(3d2b);
                                                            goto(3db6);
                                                        }
                                                    } else {
                                                        if((msg.value == 0) == 0) goto(3d2b);
                                                        goto(3db6);
                                                    }
                                                } else {
                                                    if(0 == var6) {
                                                        if(0 == var7) {
                                                            if(msg.value >= 2b5e3af16b1880000) {
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                    require((output.length >= 20));
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                        require((output.length >= 20));
                                                                        var15 += 1;
                                                                        mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                        mapping8[(1 + var15)] = 0;
                                                                        mapping8[(1 + var15)] = msg.value;
                                                                        mapping8[(1 + var15)] = block.timestamp;
                                                                        totalSale = totalSale;
                                                                        ifstorage[2c] {
                                                                            if(storage[2c] == 0) {
                                                                                if(storage[2c] == 0) {
                                                                                    return 1;
                                                                                } else {
                                                                                    var12 = var12;
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                var12 = var12;
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if(initTime <= block.timestamp) goto(377b);
                                                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            } else {
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                    require((output.length >= 20));
                                                                    var15 += 1;
                                                                    mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                    mapping8[(1 + var15)] = 0;
                                                                    mapping8[(1 + var15)] = msg.value;
                                                                    mapping8[(1 + var15)] = block.timestamp;
                                                                    totalSale = totalSale;
                                                                    ifstorage[2c] {
                                                                        if(storage[2c] == 0) {
                                                                            if(storage[2c] == 0) {
                                                                                return 1;
                                                                            } else {
                                                                                var12 = var12;
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            var12 = var12;
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if(initTime <= block.timestamp) goto(377b);
                                                                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            }
                                                        } else {
                                                            if((msg.value == 0) == 0) goto(3d2b);
                                                            goto(3db6);
                                                        }
                                                    } else {
                                                        if((msg.value == 0) == 0) goto(3d2b);
                                                        goto(3db6);
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if((msg.value == 0) == 0) {
                                            require(msg.value);
                                            if(((msg.value * storage[1d]) / msg.value) == storage[1d]) {
                                                require(((msg.sender == 0) == 0));
                                                require((mapping1[this] >= ((msg.value * storage[1d]) / 2540be400)));
                                                require(((mapping1[msg.sender] + ((msg.value * storage[1d]) / 2540be400)) > mapping1[msg.sender]));
                                                mapping1[this] -= ((msg.value * storage[1d]) / 2540be400);
                                                mapping1[msg.sender] = (mapping1[msg.sender] + ((msg.value * storage[1d]) / 2540be400));
                                                mapping1[this] -= (((msg.value * storage[1d]) / 2540be400) / a);
                                                mapping1[var7] = (mapping1[var7] + (((msg.value * storage[1d]) / 2540be400) / a));
                                                emit Transfer(this, var7, ((msg.value * storage[1d]) / 2540be400) / a)
                                                emit Transfer(this, msg.sender, (msg.value * storage[1d]) / 2540be400)
                                                require((((mapping1[this] + mapping1[msg.sender]) + mapping1[var7]) == ((mapping1[this] + mapping1[msg.sender]) + mapping1[var7])));
                                                if(var16 == 0) {
                                                    if(0 == var6) {
                                                        if(0 == var7) {
                                                            if(msg.value >= 2b5e3af16b1880000) {
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                    require((output.length >= 20));
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                        require((output.length >= 20));
                                                                        var15 += 1;
                                                                        mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                        mapping8[(1 + var15)] = ((msg.value * storage[1d]) / 2540be400);
                                                                        mapping8[(1 + var15)] = msg.value;
                                                                        mapping8[(1 + var15)] = block.timestamp;
                                                                        totalSale = (totalSale + ((msg.value * storage[1d]) / 2540be400));
                                                                        ifstorage[2c] {
                                                                            if(storage[2c] == 0) {
                                                                                if(storage[2c] == 0) {
                                                                                    return 1;
                                                                                } else {
                                                                                    var12 = (var12 + ((msg.value * storage[1d]) / 2540be400));
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = storage[1d];
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                var12 = (var12 + ((msg.value * storage[1d]) / 2540be400));
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[1d];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if(initTime <= block.timestamp) goto(377b);
                                                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            } else {
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                    require((output.length >= 20));
                                                                    var15 += 1;
                                                                    mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                    mapping8[(1 + var15)] = ((msg.value * storage[1d]) / 2540be400);
                                                                    mapping8[(1 + var15)] = msg.value;
                                                                    mapping8[(1 + var15)] = block.timestamp;
                                                                    totalSale = (totalSale + ((msg.value * storage[1d]) / 2540be400));
                                                                    ifstorage[2c] {
                                                                        if(storage[2c] == 0) {
                                                                            if(storage[2c] == 0) {
                                                                                return 1;
                                                                            } else {
                                                                                var12 = (var12 + ((msg.value * storage[1d]) / 2540be400));
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[1d];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            var12 = (var12 + ((msg.value * storage[1d]) / 2540be400));
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = storage[1d];
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if(initTime <= block.timestamp) goto(377b);
                                                                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            }
                                                        } else {
                                                            if((msg.value == 0) == 0) goto(3d2b);
                                                            revert("Invalid instruction (0xfe)");
                                                        }
                                                    } else {
                                                        if((msg.value == 0) == 0) goto(3d2b);
                                                        revert("Invalid instruction (0xfe)");
                                                    }
                                                } else {
                                                    if(0 == var6) {
                                                        if(0 == var7) {
                                                            if(msg.value >= 2b5e3af16b1880000) {
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                    require((output.length >= 20));
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                        require((output.length >= 20));
                                                                        var15 += 1;
                                                                        mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                        mapping8[(1 + var15)] = ((msg.value * storage[1d]) / 2540be400);
                                                                        mapping8[(1 + var15)] = msg.value;
                                                                        mapping8[(1 + var15)] = block.timestamp;
                                                                        totalSale = (totalSale + ((msg.value * storage[1d]) / 2540be400));
                                                                        ifstorage[2c] {
                                                                            if(storage[2c] == 0) {
                                                                                if(storage[2c] == 0) {
                                                                                    return 1;
                                                                                } else {
                                                                                    var12 = (var12 + ((msg.value * storage[1d]) / 2540be400));
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = storage[1d];
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                var12 = (var12 + ((msg.value * storage[1d]) / 2540be400));
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[1d];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if(initTime <= block.timestamp) goto(377b);
                                                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            } else {
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                    require((output.length >= 20));
                                                                    var15 += 1;
                                                                    mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                    mapping8[(1 + var15)] = ((msg.value * storage[1d]) / 2540be400);
                                                                    mapping8[(1 + var15)] = msg.value;
                                                                    mapping8[(1 + var15)] = block.timestamp;
                                                                    totalSale = (totalSale + ((msg.value * storage[1d]) / 2540be400));
                                                                    ifstorage[2c] {
                                                                        if(storage[2c] == 0) {
                                                                            if(storage[2c] == 0) {
                                                                                return 1;
                                                                            } else {
                                                                                var12 = (var12 + ((msg.value * storage[1d]) / 2540be400));
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[1d];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            var12 = (var12 + ((msg.value * storage[1d]) / 2540be400));
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = storage[1d];
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if(initTime <= block.timestamp) goto(377b);
                                                                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            }
                                                        } else {
                                                            if((msg.value == 0) == 0) goto(3d2b);
                                                            revert("Invalid instruction (0xfe)");
                                                        }
                                                    } else {
                                                        if((msg.value == 0) == 0) goto(3d2b);
                                                        revert("Invalid instruction (0xfe)");
                                                    }
                                                }
                                            } else {
                                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
                                            }
                                        } else {
                                            require(((msg.sender == 0) == 0));
                                            require((mapping1[this] >= 0));
                                            require((mapping1[msg.sender] > mapping1[msg.sender]));
                                            mapping1[this] -= 0;
                                            mapping1[msg.sender] = mapping1[msg.sender];
                                            mapping1[this] -= 0;
                                            mapping1[var7] = mapping1[var7];
                                            emit Transfer(this, var7, 0)
                                            emit Transfer(this, msg.sender, 0)
                                            require((((mapping1[this] + mapping1[msg.sender]) + mapping1[var7]) == ((mapping1[this] + mapping1[msg.sender]) + mapping1[var7])));
                                            if(var16 == 0) {
                                                if(0 == var6) {
                                                    if(0 == var7) {
                                                        if(msg.value >= 2b5e3af16b1880000) {
                                                            require((address(var3).code.length));
                                                            if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                require((output.length >= 20));
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                    require((output.length >= 20));
                                                                    var15 += 1;
                                                                    mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                    mapping8[(1 + var15)] = 0;
                                                                    mapping8[(1 + var15)] = msg.value;
                                                                    mapping8[(1 + var15)] = block.timestamp;
                                                                    totalSale = totalSale;
                                                                    ifstorage[2c] {
                                                                        if(storage[2c] == 0) {
                                                                            if(storage[2c] == 0) {
                                                                                return 1;
                                                                            } else {
                                                                                var12 = var12;
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[1d];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            var12 = var12;
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = storage[1d];
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if(initTime <= block.timestamp) goto(377b);
                                                                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            } else {
                                                                revert(memory[0:(0+output.length)]);
                                                            }
                                                        } else {
                                                            require((address(var3).code.length));
                                                            if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                require((output.length >= 20));
                                                                var15 += 1;
                                                                mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                mapping8[(1 + var15)] = 0;
                                                                mapping8[(1 + var15)] = msg.value;
                                                                mapping8[(1 + var15)] = block.timestamp;
                                                                totalSale = totalSale;
                                                                ifstorage[2c] {
                                                                    if(storage[2c] == 0) {
                                                                        if(storage[2c] == 0) {
                                                                            return 1;
                                                                        } else {
                                                                            var12 = var12;
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = storage[1d];
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        var12 = var12;
                                                                        if(var12 <= storage[15]) {
                                                                            return 1;
                                                                        } else {
                                                                            require(storage[15]);
                                                                            var12 = (var12 % storage[15]);
                                                                            var11 = storage[1d];
                                                                            var13 = (totalSale - var12);
                                                                            var14 = totalBurn;
                                                                            return 1;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if(initTime <= block.timestamp) goto(377b);
                                                                    revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                }
                                                            } else {
                                                                revert(memory[0:(0+output.length)]);
                                                            }
                                                        }
                                                    } else {
                                                        if((msg.value == 0) == 0) goto(3d2b);
                                                        goto(3db6);
                                                    }
                                                } else {
                                                    if((msg.value == 0) == 0) goto(3d2b);
                                                    goto(3db6);
                                                }
                                            } else {
                                                if(0 == var6) {
                                                    if(0 == var7) {
                                                        if(msg.value >= 2b5e3af16b1880000) {
                                                            require((address(var3).code.length));
                                                            if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                require((output.length >= 20));
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                    require((output.length >= 20));
                                                                    var15 += 1;
                                                                    mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                    mapping8[(1 + var15)] = 0;
                                                                    mapping8[(1 + var15)] = msg.value;
                                                                    mapping8[(1 + var15)] = block.timestamp;
                                                                    totalSale = totalSale;
                                                                    ifstorage[2c] {
                                                                        if(storage[2c] == 0) {
                                                                            if(storage[2c] == 0) {
                                                                                return 1;
                                                                            } else {
                                                                                var12 = var12;
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[1d];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            var12 = var12;
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = storage[1d];
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if(initTime <= block.timestamp) goto(377b);
                                                                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            } else {
                                                                revert(memory[0:(0+output.length)]);
                                                            }
                                                        } else {
                                                            require((address(var3).code.length));
                                                            if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                require((output.length >= 20));
                                                                var15 += 1;
                                                                mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                mapping8[(1 + var15)] = 0;
                                                                mapping8[(1 + var15)] = msg.value;
                                                                mapping8[(1 + var15)] = block.timestamp;
                                                                totalSale = totalSale;
                                                                ifstorage[2c] {
                                                                    if(storage[2c] == 0) {
                                                                        if(storage[2c] == 0) {
                                                                            return 1;
                                                                        } else {
                                                                            var12 = var12;
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = storage[1d];
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        var12 = var12;
                                                                        if(var12 <= storage[15]) {
                                                                            return 1;
                                                                        } else {
                                                                            require(storage[15]);
                                                                            var12 = (var12 % storage[15]);
                                                                            var11 = storage[1d];
                                                                            var13 = (totalSale - var12);
                                                                            var14 = totalBurn;
                                                                            return 1;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if(initTime <= block.timestamp) goto(377b);
                                                                    revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                }
                                                            } else {
                                                                revert(memory[0:(0+output.length)]);
                                                            }
                                                        }
                                                    } else {
                                                        if((msg.value == 0) == 0) goto(3d2b);
                                                        goto(3db6);
                                                    }
                                                } else {
                                                    if((msg.value == 0) == 0) goto(3d2b);
                                                    goto(3db6);
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    require((((block.timestamp - initTime) / storage[17]) < 6));
                                    if((msg.value == 0) == 0) {
                                        require(msg.value);
                                        if(((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / msg.value) == storage[(((block.timestamp - initTime) / storage[17]) + 18)]) {
                                            require(((msg.sender == 0) == 0));
                                            require((mapping1[this] >= ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400)));
                                            require(((mapping1[msg.sender] + ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400)) > mapping1[msg.sender]));
                                            mapping1[this] -= ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400);
                                            mapping1[msg.sender] = (mapping1[msg.sender] + ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400));
                                            mapping1[this] -= (((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400) / a);
                                            mapping1[var7] = (mapping1[var7] + (((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400) / a));
                                            emit Transfer(this, var7, ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400) / a)
                                            emit Transfer(this, msg.sender, (msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400)
                                            require((((mapping1[this] + mapping1[msg.sender]) + mapping1[var7]) == ((mapping1[this] + mapping1[msg.sender]) + mapping1[var7])));
                                            if(var16 == 0) {
                                                if(0 == var6) {
                                                    if(0 == var7) {
                                                        if(msg.value >= 2b5e3af16b1880000) {
                                                            require((address(var3).code.length));
                                                            if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                require((output.length >= 20));
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                    require((output.length >= 20));
                                                                    var15 += 1;
                                                                    mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                    mapping8[(1 + var15)] = ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400);
                                                                    mapping8[(1 + var15)] = msg.value;
                                                                    mapping8[(1 + var15)] = block.timestamp;
                                                                    totalSale = (totalSale + ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400));
                                                                    ifstorage[2c] {
                                                                        if(storage[2c] == 0) {
                                                                            if(storage[2c] == 0) {
                                                                                return 1;
                                                                            } else {
                                                                                var12 = (var12 + ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400));
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            var12 = (var12 + ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400));
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if(initTime <= block.timestamp) goto(377b);
                                                                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            } else {
                                                                revert(memory[0:(0+output.length)]);
                                                            }
                                                        } else {
                                                            require((address(var3).code.length));
                                                            if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                require((output.length >= 20));
                                                                var15 += 1;
                                                                mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                mapping8[(1 + var15)] = ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400);
                                                                mapping8[(1 + var15)] = msg.value;
                                                                mapping8[(1 + var15)] = block.timestamp;
                                                                totalSale = (totalSale + ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400));
                                                                ifstorage[2c] {
                                                                    if(storage[2c] == 0) {
                                                                        if(storage[2c] == 0) {
                                                                            return 1;
                                                                        } else {
                                                                            var12 = (var12 + ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400));
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        var12 = (var12 + ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400));
                                                                        if(var12 <= storage[15]) {
                                                                            return 1;
                                                                        } else {
                                                                            require(storage[15]);
                                                                            var12 = (var12 % storage[15]);
                                                                            var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                            var13 = (totalSale - var12);
                                                                            var14 = totalBurn;
                                                                            return 1;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if(initTime <= block.timestamp) goto(377b);
                                                                    revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                }
                                                            } else {
                                                                revert(memory[0:(0+output.length)]);
                                                            }
                                                        }
                                                    } else {
                                                        if((msg.value == 0) == 0) goto(3d2b);
                                                        revert("Invalid instruction (0xfe)");
                                                    }
                                                } else {
                                                    if((msg.value == 0) == 0) goto(3d2b);
                                                    revert("Invalid instruction (0xfe)");
                                                }
                                            } else {
                                                if(0 == var6) {
                                                    if(0 == var7) {
                                                        if(msg.value >= 2b5e3af16b1880000) {
                                                            require((address(var3).code.length));
                                                            if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                require((output.length >= 20));
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                    require((output.length >= 20));
                                                                    var15 += 1;
                                                                    mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                    mapping8[(1 + var15)] = ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400);
                                                                    mapping8[(1 + var15)] = msg.value;
                                                                    mapping8[(1 + var15)] = block.timestamp;
                                                                    totalSale = (totalSale + ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400));
                                                                    ifstorage[2c] {
                                                                        if(storage[2c] == 0) {
                                                                            if(storage[2c] == 0) {
                                                                                return 1;
                                                                            } else {
                                                                                var12 = (var12 + ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400));
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            var12 = (var12 + ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400));
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if(initTime <= block.timestamp) goto(377b);
                                                                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            } else {
                                                                revert(memory[0:(0+output.length)]);
                                                            }
                                                        } else {
                                                            require((address(var3).code.length));
                                                            if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                require((output.length >= 20));
                                                                var15 += 1;
                                                                mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                mapping8[(1 + var15)] = ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400);
                                                                mapping8[(1 + var15)] = msg.value;
                                                                mapping8[(1 + var15)] = block.timestamp;
                                                                totalSale = (totalSale + ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400));
                                                                ifstorage[2c] {
                                                                    if(storage[2c] == 0) {
                                                                        if(storage[2c] == 0) {
                                                                            return 1;
                                                                        } else {
                                                                            var12 = (var12 + ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400));
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        var12 = (var12 + ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400));
                                                                        if(var12 <= storage[15]) {
                                                                            return 1;
                                                                        } else {
                                                                            require(storage[15]);
                                                                            var12 = (var12 % storage[15]);
                                                                            var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                            var13 = (totalSale - var12);
                                                                            var14 = totalBurn;
                                                                            return 1;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if(initTime <= block.timestamp) goto(377b);
                                                                    revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                }
                                                            } else {
                                                                revert(memory[0:(0+output.length)]);
                                                            }
                                                        }
                                                    } else {
                                                        if((msg.value == 0) == 0) goto(3d2b);
                                                        revert("Invalid instruction (0xfe)");
                                                    }
                                                } else {
                                                    if((msg.value == 0) == 0) goto(3d2b);
                                                    revert("Invalid instruction (0xfe)");
                                                }
                                            }
                                        } else {
                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
                                        }
                                    } else {
                                        require(((msg.sender == 0) == 0));
                                        require((mapping1[this] >= 0));
                                        require((mapping1[msg.sender] > mapping1[msg.sender]));
                                        mapping1[this] -= 0;
                                        mapping1[msg.sender] = mapping1[msg.sender];
                                        mapping1[this] -= 0;
                                        mapping1[var7] = mapping1[var7];
                                        emit Transfer(this, var7, 0)
                                        emit Transfer(this, msg.sender, 0)
                                        require((((mapping1[this] + mapping1[msg.sender]) + mapping1[var7]) == ((mapping1[this] + mapping1[msg.sender]) + mapping1[var7])));
                                        if(var16 == 0) {
                                            if(0 == var6) {
                                                if(0 == var7) {
                                                    if(msg.value >= 2b5e3af16b1880000) {
                                                        require((address(var3).code.length));
                                                        if(call(gasleft(),var3,0,80,44,80,20)) {
                                                            require((output.length >= 20));
                                                            require((address(var3).code.length));
                                                            if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                require((output.length >= 20));
                                                                var15 += 1;
                                                                mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                mapping8[(1 + var15)] = 0;
                                                                mapping8[(1 + var15)] = msg.value;
                                                                mapping8[(1 + var15)] = block.timestamp;
                                                                totalSale = totalSale;
                                                                ifstorage[2c] {
                                                                    if(storage[2c] == 0) {
                                                                        if(storage[2c] == 0) {
                                                                            return 1;
                                                                        } else {
                                                                            var12 = var12;
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        var12 = var12;
                                                                        if(var12 <= storage[15]) {
                                                                            return 1;
                                                                        } else {
                                                                            require(storage[15]);
                                                                            var12 = (var12 % storage[15]);
                                                                            var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                            var13 = (totalSale - var12);
                                                                            var14 = totalBurn;
                                                                            return 1;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if(initTime <= block.timestamp) goto(377b);
                                                                    revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                }
                                                            } else {
                                                                revert(memory[0:(0+output.length)]);
                                                            }
                                                        } else {
                                                            revert(memory[0:(0+output.length)]);
                                                        }
                                                    } else {
                                                        require((address(var3).code.length));
                                                        if(call(gasleft(),var3,0,80,4,80,20)) {
                                                            require((output.length >= 20));
                                                            var15 += 1;
                                                            mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                            mapping8[(1 + var15)] = 0;
                                                            mapping8[(1 + var15)] = msg.value;
                                                            mapping8[(1 + var15)] = block.timestamp;
                                                            totalSale = totalSale;
                                                            ifstorage[2c] {
                                                                if(storage[2c] == 0) {
                                                                    if(storage[2c] == 0) {
                                                                        return 1;
                                                                    } else {
                                                                        var12 = var12;
                                                                        if(var12 <= storage[15]) {
                                                                            return 1;
                                                                        } else {
                                                                            require(storage[15]);
                                                                            var12 = (var12 % storage[15]);
                                                                            var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                            var13 = (totalSale - var12);
                                                                            var14 = totalBurn;
                                                                            return 1;
                                                                        }
                                                                    }
                                                                } else {
                                                                    var12 = var12;
                                                                    if(var12 <= storage[15]) {
                                                                        return 1;
                                                                    } else {
                                                                        require(storage[15]);
                                                                        var12 = (var12 % storage[15]);
                                                                        var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                        var13 = (totalSale - var12);
                                                                        var14 = totalBurn;
                                                                        return 1;
                                                                    }
                                                                }
                                                            } else {
                                                                if(initTime <= block.timestamp) goto(377b);
                                                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                            }
                                                        } else {
                                                            revert(memory[0:(0+output.length)]);
                                                        }
                                                    }
                                                } else {
                                                    if((msg.value == 0) == 0) goto(3d2b);
                                                    goto(3db6);
                                                }
                                            } else {
                                                if((msg.value == 0) == 0) goto(3d2b);
                                                goto(3db6);
                                            }
                                        } else {
                                            if(0 == var6) {
                                                if(0 == var7) {
                                                    if(msg.value >= 2b5e3af16b1880000) {
                                                        require((address(var3).code.length));
                                                        if(call(gasleft(),var3,0,80,44,80,20)) {
                                                            require((output.length >= 20));
                                                            require((address(var3).code.length));
                                                            if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                require((output.length >= 20));
                                                                var15 += 1;
                                                                mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                mapping8[(1 + var15)] = 0;
                                                                mapping8[(1 + var15)] = msg.value;
                                                                mapping8[(1 + var15)] = block.timestamp;
                                                                totalSale = totalSale;
                                                                ifstorage[2c] {
                                                                    if(storage[2c] == 0) {
                                                                        if(storage[2c] == 0) {
                                                                            return 1;
                                                                        } else {
                                                                            var12 = var12;
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        var12 = var12;
                                                                        if(var12 <= storage[15]) {
                                                                            return 1;
                                                                        } else {
                                                                            require(storage[15]);
                                                                            var12 = (var12 % storage[15]);
                                                                            var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                            var13 = (totalSale - var12);
                                                                            var14 = totalBurn;
                                                                            return 1;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if(initTime <= block.timestamp) goto(377b);
                                                                    revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                }
                                                            } else {
                                                                revert(memory[0:(0+output.length)]);
                                                            }
                                                        } else {
                                                            revert(memory[0:(0+output.length)]);
                                                        }
                                                    } else {
                                                        require((address(var3).code.length));
                                                        if(call(gasleft(),var3,0,80,4,80,20)) {
                                                            require((output.length >= 20));
                                                            var15 += 1;
                                                            mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                            mapping8[(1 + var15)] = 0;
                                                            mapping8[(1 + var15)] = msg.value;
                                                            mapping8[(1 + var15)] = block.timestamp;
                                                            totalSale = totalSale;
                                                            ifstorage[2c] {
                                                                if(storage[2c] == 0) {
                                                                    if(storage[2c] == 0) {
                                                                        return 1;
                                                                    } else {
                                                                        var12 = var12;
                                                                        if(var12 <= storage[15]) {
                                                                            return 1;
                                                                        } else {
                                                                            require(storage[15]);
                                                                            var12 = (var12 % storage[15]);
                                                                            var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                            var13 = (totalSale - var12);
                                                                            var14 = totalBurn;
                                                                            return 1;
                                                                        }
                                                                    }
                                                                } else {
                                                                    var12 = var12;
                                                                    if(var12 <= storage[15]) {
                                                                        return 1;
                                                                    } else {
                                                                        require(storage[15]);
                                                                        var12 = (var12 % storage[15]);
                                                                        var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                        var13 = (totalSale - var12);
                                                                        var14 = totalBurn;
                                                                        return 1;
                                                                    }
                                                                }
                                                            } else {
                                                                if(initTime <= block.timestamp) goto(377b);
                                                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                            }
                                                        } else {
                                                            revert(memory[0:(0+output.length)]);
                                                        }
                                                    }
                                                } else {
                                                    if((msg.value == 0) == 0) goto(3d2b);
                                                    goto(3db6);
                                                }
                                            } else {
                                                if((msg.value == 0) == 0) goto(3d2b);
                                                goto(3db6);
                                            }
                                        }
                                    }
                                }
                            } else {
                                require(storage[16]);
                                if((totalSale / storage[16]) <= ((block.timestamp - initTime) / storage[17])) {
                                    if(((block.timestamp - initTime) / storage[17]) >= 6) {
                                        ifstorage[2c] {
                                            if(var11 <= 0) {
                                                require((186a0 * (a ** decimals)));
                                                require((30d40 * (a ** decimals)));
                                                if((msg.value == 0) == 0) {
                                                    require(msg.value);
                                                    if(((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / msg.value) == ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) {
                                                        require(((msg.sender == 0) == 0));
                                                        require((mapping1[this] >= ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400)));
                                                        require(((mapping1[msg.sender] + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400)) > mapping1[msg.sender]));
                                                        mapping1[this] -= ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400);
                                                        mapping1[msg.sender] = (mapping1[msg.sender] + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                        mapping1[this] -= (((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400) / a);
                                                        mapping1[var7] = (mapping1[var7] + (((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400) / a));
                                                        emit Transfer(this, var7, ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400) / a)
                                                        emit Transfer(this, msg.sender, (msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400)
                                                        require((((mapping1[this] + mapping1[msg.sender]) + mapping1[var7]) == ((mapping1[this] + mapping1[msg.sender]) + mapping1[var7])));
                                                        if(var16 == 0) {
                                                            if(0 == var6) {
                                                                if(0 == var7) {
                                                                    if(msg.value >= 2b5e3af16b1880000) {
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                            require((output.length >= 20));
                                                                            require((address(var3).code.length));
                                                                            if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                                require((output.length >= 20));
                                                                                var15 += 1;
                                                                                mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                                mapping8[(1 + var15)] = ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400);
                                                                                mapping8[(1 + var15)] = msg.value;
                                                                                mapping8[(1 + var15)] = block.timestamp;
                                                                                totalSale = (totalSale + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                ifstorage[2c] {
                                                                                    if(storage[2c] == 0) {
                                                                                        if(storage[2c] == 0) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            var12 = (var12 + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                            if(var12 <= storage[15]) {
                                                                                                return 1;
                                                                                            } else {
                                                                                                require(storage[15]);
                                                                                                var12 = (var12 % storage[15]);
                                                                                                var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                                var13 = (totalSale - var12);
                                                                                                var14 = totalBurn;
                                                                                                return 1;
                                                                                            }
                                                                                        }
                                                                                    } else {
                                                                                        var12 = (var12 + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    if(initTime <= block.timestamp) goto(377b);
                                                                                    revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                                }
                                                                            } else {
                                                                                revert(memory[0:(0+output.length)]);
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    } else {
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                            require((output.length >= 20));
                                                                            var15 += 1;
                                                                            mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                            mapping8[(1 + var15)] = ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400);
                                                                            mapping8[(1 + var15)] = msg.value;
                                                                            mapping8[(1 + var15)] = block.timestamp;
                                                                            totalSale = (totalSale + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                            ifstorage[2c] {
                                                                                if(storage[2c] == 0) {
                                                                                    if(storage[2c] == 0) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        var12 = (var12 + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    var12 = (var12 + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if(initTime <= block.timestamp) goto(377b);
                                                                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    }
                                                                } else {
                                                                    if((msg.value == 0) == 0) goto(3d2b);
                                                                    revert("Invalid instruction (0xfe)");
                                                                }
                                                            } else {
                                                                if((msg.value == 0) == 0) goto(3d2b);
                                                                revert("Invalid instruction (0xfe)");
                                                            }
                                                        } else {
                                                            if(0 == var6) {
                                                                if(0 == var7) {
                                                                    if(msg.value >= 2b5e3af16b1880000) {
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                            require((output.length >= 20));
                                                                            require((address(var3).code.length));
                                                                            if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                                require((output.length >= 20));
                                                                                var15 += 1;
                                                                                mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                                mapping8[(1 + var15)] = ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400);
                                                                                mapping8[(1 + var15)] = msg.value;
                                                                                mapping8[(1 + var15)] = block.timestamp;
                                                                                totalSale = (totalSale + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                ifstorage[2c] {
                                                                                    if(storage[2c] == 0) {
                                                                                        if(storage[2c] == 0) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            var12 = (var12 + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                            if(var12 <= storage[15]) {
                                                                                                return 1;
                                                                                            } else {
                                                                                                require(storage[15]);
                                                                                                var12 = (var12 % storage[15]);
                                                                                                var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                                var13 = (totalSale - var12);
                                                                                                var14 = totalBurn;
                                                                                                return 1;
                                                                                            }
                                                                                        }
                                                                                    } else {
                                                                                        var12 = (var12 + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    if(initTime <= block.timestamp) goto(377b);
                                                                                    revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                                }
                                                                            } else {
                                                                                revert(memory[0:(0+output.length)]);
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    } else {
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                            require((output.length >= 20));
                                                                            var15 += 1;
                                                                            mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                            mapping8[(1 + var15)] = ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400);
                                                                            mapping8[(1 + var15)] = msg.value;
                                                                            mapping8[(1 + var15)] = block.timestamp;
                                                                            totalSale = (totalSale + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                            ifstorage[2c] {
                                                                                if(storage[2c] == 0) {
                                                                                    if(storage[2c] == 0) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        var12 = (var12 + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    var12 = (var12 + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if(initTime <= block.timestamp) goto(377b);
                                                                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    }
                                                                } else {
                                                                    if((msg.value == 0) == 0) goto(3d2b);
                                                                    revert("Invalid instruction (0xfe)");
                                                                }
                                                            } else {
                                                                if((msg.value == 0) == 0) goto(3d2b);
                                                                revert("Invalid instruction (0xfe)");
                                                            }
                                                        }
                                                    } else {
                                                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
                                                    }
                                                } else {
                                                    require(((msg.sender == 0) == 0));
                                                    require((mapping1[this] >= 0));
                                                    require((mapping1[msg.sender] > mapping1[msg.sender]));
                                                    mapping1[this] -= 0;
                                                    mapping1[msg.sender] = mapping1[msg.sender];
                                                    mapping1[this] -= 0;
                                                    mapping1[var7] = mapping1[var7];
                                                    emit Transfer(this, var7, 0)
                                                    emit Transfer(this, msg.sender, 0)
                                                    require((((mapping1[this] + mapping1[msg.sender]) + mapping1[var7]) == ((mapping1[this] + mapping1[msg.sender]) + mapping1[var7])));
                                                    if(var16 == 0) {
                                                        if(0 == var6) {
                                                            if(0 == var7) {
                                                                if(msg.value >= 2b5e3af16b1880000) {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                        require((output.length >= 20));
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                            require((output.length >= 20));
                                                                            var15 += 1;
                                                                            mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                            mapping8[(1 + var15)] = 0;
                                                                            mapping8[(1 + var15)] = msg.value;
                                                                            mapping8[(1 + var15)] = block.timestamp;
                                                                            totalSale = totalSale;
                                                                            ifstorage[2c] {
                                                                                if(storage[2c] == 0) {
                                                                                    if(storage[2c] == 0) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        var12 = var12;
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    var12 = var12;
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if(initTime <= block.timestamp) goto(377b);
                                                                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                } else {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                        require((output.length >= 20));
                                                                        var15 += 1;
                                                                        mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                        mapping8[(1 + var15)] = 0;
                                                                        mapping8[(1 + var15)] = msg.value;
                                                                        mapping8[(1 + var15)] = block.timestamp;
                                                                        totalSale = totalSale;
                                                                        ifstorage[2c] {
                                                                            if(storage[2c] == 0) {
                                                                                if(storage[2c] == 0) {
                                                                                    return 1;
                                                                                } else {
                                                                                    var12 = var12;
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                var12 = var12;
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if(initTime <= block.timestamp) goto(377b);
                                                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                }
                                                            } else {
                                                                if((msg.value == 0) == 0) goto(3d2b);
                                                                goto(3db6);
                                                            }
                                                        } else {
                                                            if((msg.value == 0) == 0) goto(3d2b);
                                                            goto(3db6);
                                                        }
                                                    } else {
                                                        if(0 == var6) {
                                                            if(0 == var7) {
                                                                if(msg.value >= 2b5e3af16b1880000) {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                        require((output.length >= 20));
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                            require((output.length >= 20));
                                                                            var15 += 1;
                                                                            mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                            mapping8[(1 + var15)] = 0;
                                                                            mapping8[(1 + var15)] = msg.value;
                                                                            mapping8[(1 + var15)] = block.timestamp;
                                                                            totalSale = totalSale;
                                                                            ifstorage[2c] {
                                                                                if(storage[2c] == 0) {
                                                                                    if(storage[2c] == 0) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        var12 = var12;
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    var12 = var12;
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if(initTime <= block.timestamp) goto(377b);
                                                                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                } else {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                        require((output.length >= 20));
                                                                        var15 += 1;
                                                                        mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                        mapping8[(1 + var15)] = 0;
                                                                        mapping8[(1 + var15)] = msg.value;
                                                                        mapping8[(1 + var15)] = block.timestamp;
                                                                        totalSale = totalSale;
                                                                        ifstorage[2c] {
                                                                            if(storage[2c] == 0) {
                                                                                if(storage[2c] == 0) {
                                                                                    return 1;
                                                                                } else {
                                                                                    var12 = var12;
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                var12 = var12;
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if(initTime <= block.timestamp) goto(377b);
                                                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                }
                                                            } else {
                                                                if((msg.value == 0) == 0) goto(3d2b);
                                                                goto(3db6);
                                                            }
                                                        } else {
                                                            if((msg.value == 0) == 0) goto(3d2b);
                                                            goto(3db6);
                                                        }
                                                    }
                                                }
                                            } else {
                                                require((186a0 * (a ** decimals)));
                                                require((30d40 * (a ** decimals)));
                                                if((msg.value == 0) == 0) {
                                                    require(msg.value);
                                                    if(((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / msg.value) == ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) {
                                                        require(((msg.sender == 0) == 0));
                                                        require((mapping1[this] >= ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400)));
                                                        require(((mapping1[msg.sender] + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400)) > mapping1[msg.sender]));
                                                        mapping1[this] -= ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400);
                                                        mapping1[msg.sender] = (mapping1[msg.sender] + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                        mapping1[this] -= (((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400) / a);
                                                        mapping1[var7] = (mapping1[var7] + (((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400) / a));
                                                        emit Transfer(this, var7, ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400) / a)
                                                        emit Transfer(this, msg.sender, (msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400)
                                                        require((((mapping1[this] + mapping1[msg.sender]) + mapping1[var7]) == ((mapping1[this] + mapping1[msg.sender]) + mapping1[var7])));
                                                        if(var16 == 0) {
                                                            if(0 == var6) {
                                                                if(0 == var7) {
                                                                    if(msg.value >= 2b5e3af16b1880000) {
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                            require((output.length >= 20));
                                                                            require((address(var3).code.length));
                                                                            if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                                require((output.length >= 20));
                                                                                var15 += 1;
                                                                                mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                                mapping8[(1 + var15)] = ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400);
                                                                                mapping8[(1 + var15)] = msg.value;
                                                                                mapping8[(1 + var15)] = block.timestamp;
                                                                                totalSale = (totalSale + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                ifstorage[2c] {
                                                                                    if(storage[2c] == 0) {
                                                                                        if(storage[2c] == 0) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            var12 = (var12 + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                            if(var12 <= storage[15]) {
                                                                                                return 1;
                                                                                            } else {
                                                                                                require(storage[15]);
                                                                                                var12 = (var12 % storage[15]);
                                                                                                var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                                var13 = (totalSale - var12);
                                                                                                var14 = totalBurn;
                                                                                                return 1;
                                                                                            }
                                                                                        }
                                                                                    } else {
                                                                                        var12 = (var12 + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    if(initTime <= block.timestamp) goto(377b);
                                                                                    revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                                }
                                                                            } else {
                                                                                revert(memory[0:(0+output.length)]);
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    } else {
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                            require((output.length >= 20));
                                                                            var15 += 1;
                                                                            mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                            mapping8[(1 + var15)] = ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400);
                                                                            mapping8[(1 + var15)] = msg.value;
                                                                            mapping8[(1 + var15)] = block.timestamp;
                                                                            totalSale = (totalSale + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                            ifstorage[2c] {
                                                                                if(storage[2c] == 0) {
                                                                                    if(storage[2c] == 0) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        var12 = (var12 + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    var12 = (var12 + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if(initTime <= block.timestamp) goto(377b);
                                                                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    }
                                                                } else {
                                                                    if((msg.value == 0) == 0) goto(3d2b);
                                                                    revert("Invalid instruction (0xfe)");
                                                                }
                                                            } else {
                                                                if((msg.value == 0) == 0) goto(3d2b);
                                                                revert("Invalid instruction (0xfe)");
                                                            }
                                                        } else {
                                                            if(0 == var6) {
                                                                if(0 == var7) {
                                                                    if(msg.value >= 2b5e3af16b1880000) {
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                            require((output.length >= 20));
                                                                            require((address(var3).code.length));
                                                                            if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                                require((output.length >= 20));
                                                                                var15 += 1;
                                                                                mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                                mapping8[(1 + var15)] = ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400);
                                                                                mapping8[(1 + var15)] = msg.value;
                                                                                mapping8[(1 + var15)] = block.timestamp;
                                                                                totalSale = (totalSale + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                ifstorage[2c] {
                                                                                    if(storage[2c] == 0) {
                                                                                        if(storage[2c] == 0) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            var12 = (var12 + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                            if(var12 <= storage[15]) {
                                                                                                return 1;
                                                                                            } else {
                                                                                                require(storage[15]);
                                                                                                var12 = (var12 % storage[15]);
                                                                                                var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                                var13 = (totalSale - var12);
                                                                                                var14 = totalBurn;
                                                                                                return 1;
                                                                                            }
                                                                                        }
                                                                                    } else {
                                                                                        var12 = (var12 + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    if(initTime <= block.timestamp) goto(377b);
                                                                                    revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                                }
                                                                            } else {
                                                                                revert(memory[0:(0+output.length)]);
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    } else {
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                            require((output.length >= 20));
                                                                            var15 += 1;
                                                                            mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                            mapping8[(1 + var15)] = ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400);
                                                                            mapping8[(1 + var15)] = msg.value;
                                                                            mapping8[(1 + var15)] = block.timestamp;
                                                                            totalSale = (totalSale + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                            ifstorage[2c] {
                                                                                if(storage[2c] == 0) {
                                                                                    if(storage[2c] == 0) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        var12 = (var12 + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    var12 = (var12 + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if(initTime <= block.timestamp) goto(377b);
                                                                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    }
                                                                } else {
                                                                    if((msg.value == 0) == 0) goto(3d2b);
                                                                    revert("Invalid instruction (0xfe)");
                                                                }
                                                            } else {
                                                                if((msg.value == 0) == 0) goto(3d2b);
                                                                revert("Invalid instruction (0xfe)");
                                                            }
                                                        }
                                                    } else {
                                                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
                                                    }
                                                } else {
                                                    require(((msg.sender == 0) == 0));
                                                    require((mapping1[this] >= 0));
                                                    require((mapping1[msg.sender] > mapping1[msg.sender]));
                                                    mapping1[this] -= 0;
                                                    mapping1[msg.sender] = mapping1[msg.sender];
                                                    mapping1[this] -= 0;
                                                    mapping1[var7] = mapping1[var7];
                                                    emit Transfer(this, var7, 0)
                                                    emit Transfer(this, msg.sender, 0)
                                                    require((((mapping1[this] + mapping1[msg.sender]) + mapping1[var7]) == ((mapping1[this] + mapping1[msg.sender]) + mapping1[var7])));
                                                    if(var16 == 0) {
                                                        if(0 == var6) {
                                                            if(0 == var7) {
                                                                if(msg.value >= 2b5e3af16b1880000) {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                        require((output.length >= 20));
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                            require((output.length >= 20));
                                                                            var15 += 1;
                                                                            mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                            mapping8[(1 + var15)] = 0;
                                                                            mapping8[(1 + var15)] = msg.value;
                                                                            mapping8[(1 + var15)] = block.timestamp;
                                                                            totalSale = totalSale;
                                                                            ifstorage[2c] {
                                                                                if(storage[2c] == 0) {
                                                                                    if(storage[2c] == 0) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        var12 = var12;
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    var12 = var12;
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if(initTime <= block.timestamp) goto(377b);
                                                                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                } else {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                        require((output.length >= 20));
                                                                        var15 += 1;
                                                                        mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                        mapping8[(1 + var15)] = 0;
                                                                        mapping8[(1 + var15)] = msg.value;
                                                                        mapping8[(1 + var15)] = block.timestamp;
                                                                        totalSale = totalSale;
                                                                        ifstorage[2c] {
                                                                            if(storage[2c] == 0) {
                                                                                if(storage[2c] == 0) {
                                                                                    return 1;
                                                                                } else {
                                                                                    var12 = var12;
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                var12 = var12;
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if(initTime <= block.timestamp) goto(377b);
                                                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                }
                                                            } else {
                                                                if((msg.value == 0) == 0) goto(3d2b);
                                                                goto(3db6);
                                                            }
                                                        } else {
                                                            if((msg.value == 0) == 0) goto(3d2b);
                                                            goto(3db6);
                                                        }
                                                    } else {
                                                        if(0 == var6) {
                                                            if(0 == var7) {
                                                                if(msg.value >= 2b5e3af16b1880000) {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                        require((output.length >= 20));
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                            require((output.length >= 20));
                                                                            var15 += 1;
                                                                            mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                            mapping8[(1 + var15)] = 0;
                                                                            mapping8[(1 + var15)] = msg.value;
                                                                            mapping8[(1 + var15)] = block.timestamp;
                                                                            totalSale = totalSale;
                                                                            ifstorage[2c] {
                                                                                if(storage[2c] == 0) {
                                                                                    if(storage[2c] == 0) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        var12 = var12;
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    var12 = var12;
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if(initTime <= block.timestamp) goto(377b);
                                                                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                } else {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                        require((output.length >= 20));
                                                                        var15 += 1;
                                                                        mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                        mapping8[(1 + var15)] = 0;
                                                                        mapping8[(1 + var15)] = msg.value;
                                                                        mapping8[(1 + var15)] = block.timestamp;
                                                                        totalSale = totalSale;
                                                                        ifstorage[2c] {
                                                                            if(storage[2c] == 0) {
                                                                                if(storage[2c] == 0) {
                                                                                    return 1;
                                                                                } else {
                                                                                    var12 = var12;
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                var12 = var12;
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if(initTime <= block.timestamp) goto(377b);
                                                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                }
                                                            } else {
                                                                if((msg.value == 0) == 0) goto(3d2b);
                                                                goto(3db6);
                                                            }
                                                        } else {
                                                            if((msg.value == 0) == 0) goto(3d2b);
                                                            goto(3db6);
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if((msg.value == 0) == 0) {
                                                require(msg.value);
                                                if(((msg.value * storage[1d]) / msg.value) == storage[1d]) {
                                                    require(((msg.sender == 0) == 0));
                                                    require((mapping1[this] >= ((msg.value * storage[1d]) / 2540be400)));
                                                    require(((mapping1[msg.sender] + ((msg.value * storage[1d]) / 2540be400)) > mapping1[msg.sender]));
                                                    mapping1[this] -= ((msg.value * storage[1d]) / 2540be400);
                                                    mapping1[msg.sender] = (mapping1[msg.sender] + ((msg.value * storage[1d]) / 2540be400));
                                                    mapping1[this] -= (((msg.value * storage[1d]) / 2540be400) / a);
                                                    mapping1[var7] = (mapping1[var7] + (((msg.value * storage[1d]) / 2540be400) / a));
                                                    emit Transfer(this, var7, ((msg.value * storage[1d]) / 2540be400) / a)
                                                    emit Transfer(this, msg.sender, (msg.value * storage[1d]) / 2540be400)
                                                    require((((mapping1[this] + mapping1[msg.sender]) + mapping1[var7]) == ((mapping1[this] + mapping1[msg.sender]) + mapping1[var7])));
                                                    if(var16 == 0) {
                                                        if(0 == var6) {
                                                            if(0 == var7) {
                                                                if(msg.value >= 2b5e3af16b1880000) {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                        require((output.length >= 20));
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                            require((output.length >= 20));
                                                                            var15 += 1;
                                                                            mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                            mapping8[(1 + var15)] = ((msg.value * storage[1d]) / 2540be400);
                                                                            mapping8[(1 + var15)] = msg.value;
                                                                            mapping8[(1 + var15)] = block.timestamp;
                                                                            totalSale = (totalSale + ((msg.value * storage[1d]) / 2540be400));
                                                                            ifstorage[2c] {
                                                                                if(storage[2c] == 0) {
                                                                                    if(storage[2c] == 0) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        var12 = (var12 + ((msg.value * storage[1d]) / 2540be400));
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = storage[1d];
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    var12 = (var12 + ((msg.value * storage[1d]) / 2540be400));
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = storage[1d];
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if(initTime <= block.timestamp) goto(377b);
                                                                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                } else {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                        require((output.length >= 20));
                                                                        var15 += 1;
                                                                        mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                        mapping8[(1 + var15)] = ((msg.value * storage[1d]) / 2540be400);
                                                                        mapping8[(1 + var15)] = msg.value;
                                                                        mapping8[(1 + var15)] = block.timestamp;
                                                                        totalSale = (totalSale + ((msg.value * storage[1d]) / 2540be400));
                                                                        ifstorage[2c] {
                                                                            if(storage[2c] == 0) {
                                                                                if(storage[2c] == 0) {
                                                                                    return 1;
                                                                                } else {
                                                                                    var12 = (var12 + ((msg.value * storage[1d]) / 2540be400));
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = storage[1d];
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                var12 = (var12 + ((msg.value * storage[1d]) / 2540be400));
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[1d];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if(initTime <= block.timestamp) goto(377b);
                                                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                }
                                                            } else {
                                                                if((msg.value == 0) == 0) goto(3d2b);
                                                                revert("Invalid instruction (0xfe)");
                                                            }
                                                        } else {
                                                            if((msg.value == 0) == 0) goto(3d2b);
                                                            revert("Invalid instruction (0xfe)");
                                                        }
                                                    } else {
                                                        if(0 == var6) {
                                                            if(0 == var7) {
                                                                if(msg.value >= 2b5e3af16b1880000) {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                        require((output.length >= 20));
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                            require((output.length >= 20));
                                                                            var15 += 1;
                                                                            mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                            mapping8[(1 + var15)] = ((msg.value * storage[1d]) / 2540be400);
                                                                            mapping8[(1 + var15)] = msg.value;
                                                                            mapping8[(1 + var15)] = block.timestamp;
                                                                            totalSale = (totalSale + ((msg.value * storage[1d]) / 2540be400));
                                                                            ifstorage[2c] {
                                                                                if(storage[2c] == 0) {
                                                                                    if(storage[2c] == 0) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        var12 = (var12 + ((msg.value * storage[1d]) / 2540be400));
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = storage[1d];
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    var12 = (var12 + ((msg.value * storage[1d]) / 2540be400));
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = storage[1d];
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if(initTime <= block.timestamp) goto(377b);
                                                                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                } else {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                        require((output.length >= 20));
                                                                        var15 += 1;
                                                                        mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                        mapping8[(1 + var15)] = ((msg.value * storage[1d]) / 2540be400);
                                                                        mapping8[(1 + var15)] = msg.value;
                                                                        mapping8[(1 + var15)] = block.timestamp;
                                                                        totalSale = (totalSale + ((msg.value * storage[1d]) / 2540be400));
                                                                        ifstorage[2c] {
                                                                            if(storage[2c] == 0) {
                                                                                if(storage[2c] == 0) {
                                                                                    return 1;
                                                                                } else {
                                                                                    var12 = (var12 + ((msg.value * storage[1d]) / 2540be400));
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = storage[1d];
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                var12 = (var12 + ((msg.value * storage[1d]) / 2540be400));
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[1d];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if(initTime <= block.timestamp) goto(377b);
                                                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                }
                                                            } else {
                                                                if((msg.value == 0) == 0) goto(3d2b);
                                                                revert("Invalid instruction (0xfe)");
                                                            }
                                                        } else {
                                                            if((msg.value == 0) == 0) goto(3d2b);
                                                            revert("Invalid instruction (0xfe)");
                                                        }
                                                    }
                                                } else {
                                                    revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
                                                }
                                            } else {
                                                require(((msg.sender == 0) == 0));
                                                require((mapping1[this] >= 0));
                                                require((mapping1[msg.sender] > mapping1[msg.sender]));
                                                mapping1[this] -= 0;
                                                mapping1[msg.sender] = mapping1[msg.sender];
                                                mapping1[this] -= 0;
                                                mapping1[var7] = mapping1[var7];
                                                emit Transfer(this, var7, 0)
                                                emit Transfer(this, msg.sender, 0)
                                                require((((mapping1[this] + mapping1[msg.sender]) + mapping1[var7]) == ((mapping1[this] + mapping1[msg.sender]) + mapping1[var7])));
                                                if(var16 == 0) {
                                                    if(0 == var6) {
                                                        if(0 == var7) {
                                                            if(msg.value >= 2b5e3af16b1880000) {
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                    require((output.length >= 20));
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                        require((output.length >= 20));
                                                                        var15 += 1;
                                                                        mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                        mapping8[(1 + var15)] = 0;
                                                                        mapping8[(1 + var15)] = msg.value;
                                                                        mapping8[(1 + var15)] = block.timestamp;
                                                                        totalSale = totalSale;
                                                                        ifstorage[2c] {
                                                                            if(storage[2c] == 0) {
                                                                                if(storage[2c] == 0) {
                                                                                    return 1;
                                                                                } else {
                                                                                    var12 = var12;
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = storage[1d];
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                var12 = var12;
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[1d];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if(initTime <= block.timestamp) goto(377b);
                                                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            } else {
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                    require((output.length >= 20));
                                                                    var15 += 1;
                                                                    mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                    mapping8[(1 + var15)] = 0;
                                                                    mapping8[(1 + var15)] = msg.value;
                                                                    mapping8[(1 + var15)] = block.timestamp;
                                                                    totalSale = totalSale;
                                                                    ifstorage[2c] {
                                                                        if(storage[2c] == 0) {
                                                                            if(storage[2c] == 0) {
                                                                                return 1;
                                                                            } else {
                                                                                var12 = var12;
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[1d];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            var12 = var12;
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = storage[1d];
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if(initTime <= block.timestamp) goto(377b);
                                                                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            }
                                                        } else {
                                                            if((msg.value == 0) == 0) goto(3d2b);
                                                            goto(3db6);
                                                        }
                                                    } else {
                                                        if((msg.value == 0) == 0) goto(3d2b);
                                                        goto(3db6);
                                                    }
                                                } else {
                                                    if(0 == var6) {
                                                        if(0 == var7) {
                                                            if(msg.value >= 2b5e3af16b1880000) {
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                    require((output.length >= 20));
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                        require((output.length >= 20));
                                                                        var15 += 1;
                                                                        mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                        mapping8[(1 + var15)] = 0;
                                                                        mapping8[(1 + var15)] = msg.value;
                                                                        mapping8[(1 + var15)] = block.timestamp;
                                                                        totalSale = totalSale;
                                                                        ifstorage[2c] {
                                                                            if(storage[2c] == 0) {
                                                                                if(storage[2c] == 0) {
                                                                                    return 1;
                                                                                } else {
                                                                                    var12 = var12;
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = storage[1d];
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                var12 = var12;
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[1d];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if(initTime <= block.timestamp) goto(377b);
                                                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            } else {
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                    require((output.length >= 20));
                                                                    var15 += 1;
                                                                    mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                    mapping8[(1 + var15)] = 0;
                                                                    mapping8[(1 + var15)] = msg.value;
                                                                    mapping8[(1 + var15)] = block.timestamp;
                                                                    totalSale = totalSale;
                                                                    ifstorage[2c] {
                                                                        if(storage[2c] == 0) {
                                                                            if(storage[2c] == 0) {
                                                                                return 1;
                                                                            } else {
                                                                                var12 = var12;
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[1d];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            var12 = var12;
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = storage[1d];
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if(initTime <= block.timestamp) goto(377b);
                                                                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            }
                                                        } else {
                                                            if((msg.value == 0) == 0) goto(3d2b);
                                                            goto(3db6);
                                                        }
                                                    } else {
                                                        if((msg.value == 0) == 0) goto(3d2b);
                                                        goto(3db6);
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        require((((block.timestamp - initTime) / storage[17]) < 6));
                                        if((msg.value == 0) == 0) {
                                            require(msg.value);
                                            if(((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / msg.value) == storage[(((block.timestamp - initTime) / storage[17]) + 18)]) {
                                                require(((msg.sender == 0) == 0));
                                                require((mapping1[this] >= ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400)));
                                                require(((mapping1[msg.sender] + ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400)) > mapping1[msg.sender]));
                                                mapping1[this] -= ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400);
                                                mapping1[msg.sender] = (mapping1[msg.sender] + ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400));
                                                mapping1[this] -= (((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400) / a);
                                                mapping1[var7] = (mapping1[var7] + (((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400) / a));
                                                emit Transfer(this, var7, ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400) / a)
                                                emit Transfer(this, msg.sender, (msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400)
                                                require((((mapping1[this] + mapping1[msg.sender]) + mapping1[var7]) == ((mapping1[this] + mapping1[msg.sender]) + mapping1[var7])));
                                                if(var16 == 0) {
                                                    if(0 == var6) {
                                                        if(0 == var7) {
                                                            if(msg.value >= 2b5e3af16b1880000) {
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                    require((output.length >= 20));
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                        require((output.length >= 20));
                                                                        var15 += 1;
                                                                        mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                        mapping8[(1 + var15)] = ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400);
                                                                        mapping8[(1 + var15)] = msg.value;
                                                                        mapping8[(1 + var15)] = block.timestamp;
                                                                        totalSale = (totalSale + ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400));
                                                                        ifstorage[2c] {
                                                                            if(storage[2c] == 0) {
                                                                                if(storage[2c] == 0) {
                                                                                    return 1;
                                                                                } else {
                                                                                    var12 = (var12 + ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400));
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                var12 = (var12 + ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400));
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if(initTime <= block.timestamp) goto(377b);
                                                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            } else {
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                    require((output.length >= 20));
                                                                    var15 += 1;
                                                                    mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                    mapping8[(1 + var15)] = ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400);
                                                                    mapping8[(1 + var15)] = msg.value;
                                                                    mapping8[(1 + var15)] = block.timestamp;
                                                                    totalSale = (totalSale + ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400));
                                                                    ifstorage[2c] {
                                                                        if(storage[2c] == 0) {
                                                                            if(storage[2c] == 0) {
                                                                                return 1;
                                                                            } else {
                                                                                var12 = (var12 + ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400));
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            var12 = (var12 + ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400));
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if(initTime <= block.timestamp) goto(377b);
                                                                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            }
                                                        } else {
                                                            if((msg.value == 0) == 0) goto(3d2b);
                                                            revert("Invalid instruction (0xfe)");
                                                        }
                                                    } else {
                                                        if((msg.value == 0) == 0) goto(3d2b);
                                                        revert("Invalid instruction (0xfe)");
                                                    }
                                                } else {
                                                    if(0 == var6) {
                                                        if(0 == var7) {
                                                            if(msg.value >= 2b5e3af16b1880000) {
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                    require((output.length >= 20));
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                        require((output.length >= 20));
                                                                        var15 += 1;
                                                                        mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                        mapping8[(1 + var15)] = ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400);
                                                                        mapping8[(1 + var15)] = msg.value;
                                                                        mapping8[(1 + var15)] = block.timestamp;
                                                                        totalSale = (totalSale + ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400));
                                                                        ifstorage[2c] {
                                                                            if(storage[2c] == 0) {
                                                                                if(storage[2c] == 0) {
                                                                                    return 1;
                                                                                } else {
                                                                                    var12 = (var12 + ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400));
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                var12 = (var12 + ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400));
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if(initTime <= block.timestamp) goto(377b);
                                                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            } else {
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                    require((output.length >= 20));
                                                                    var15 += 1;
                                                                    mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                    mapping8[(1 + var15)] = ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400);
                                                                    mapping8[(1 + var15)] = msg.value;
                                                                    mapping8[(1 + var15)] = block.timestamp;
                                                                    totalSale = (totalSale + ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400));
                                                                    ifstorage[2c] {
                                                                        if(storage[2c] == 0) {
                                                                            if(storage[2c] == 0) {
                                                                                return 1;
                                                                            } else {
                                                                                var12 = (var12 + ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400));
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            var12 = (var12 + ((msg.value * storage[(((block.timestamp - initTime) / storage[17]) + 18)]) / 2540be400));
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if(initTime <= block.timestamp) goto(377b);
                                                                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            }
                                                        } else {
                                                            if((msg.value == 0) == 0) goto(3d2b);
                                                            revert("Invalid instruction (0xfe)");
                                                        }
                                                    } else {
                                                        if((msg.value == 0) == 0) goto(3d2b);
                                                        revert("Invalid instruction (0xfe)");
                                                    }
                                                }
                                            } else {
                                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
                                            }
                                        } else {
                                            require(((msg.sender == 0) == 0));
                                            require((mapping1[this] >= 0));
                                            require((mapping1[msg.sender] > mapping1[msg.sender]));
                                            mapping1[this] -= 0;
                                            mapping1[msg.sender] = mapping1[msg.sender];
                                            mapping1[this] -= 0;
                                            mapping1[var7] = mapping1[var7];
                                            emit Transfer(this, var7, 0)
                                            emit Transfer(this, msg.sender, 0)
                                            require((((mapping1[this] + mapping1[msg.sender]) + mapping1[var7]) == ((mapping1[this] + mapping1[msg.sender]) + mapping1[var7])));
                                            if(var16 == 0) {
                                                if(0 == var6) {
                                                    if(0 == var7) {
                                                        if(msg.value >= 2b5e3af16b1880000) {
                                                            require((address(var3).code.length));
                                                            if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                require((output.length >= 20));
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                    require((output.length >= 20));
                                                                    var15 += 1;
                                                                    mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                    mapping8[(1 + var15)] = 0;
                                                                    mapping8[(1 + var15)] = msg.value;
                                                                    mapping8[(1 + var15)] = block.timestamp;
                                                                    totalSale = totalSale;
                                                                    ifstorage[2c] {
                                                                        if(storage[2c] == 0) {
                                                                            if(storage[2c] == 0) {
                                                                                return 1;
                                                                            } else {
                                                                                var12 = var12;
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            var12 = var12;
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if(initTime <= block.timestamp) goto(377b);
                                                                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            } else {
                                                                revert(memory[0:(0+output.length)]);
                                                            }
                                                        } else {
                                                            require((address(var3).code.length));
                                                            if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                require((output.length >= 20));
                                                                var15 += 1;
                                                                mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                mapping8[(1 + var15)] = 0;
                                                                mapping8[(1 + var15)] = msg.value;
                                                                mapping8[(1 + var15)] = block.timestamp;
                                                                totalSale = totalSale;
                                                                ifstorage[2c] {
                                                                    if(storage[2c] == 0) {
                                                                        if(storage[2c] == 0) {
                                                                            return 1;
                                                                        } else {
                                                                            var12 = var12;
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        var12 = var12;
                                                                        if(var12 <= storage[15]) {
                                                                            return 1;
                                                                        } else {
                                                                            require(storage[15]);
                                                                            var12 = (var12 % storage[15]);
                                                                            var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                            var13 = (totalSale - var12);
                                                                            var14 = totalBurn;
                                                                            return 1;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if(initTime <= block.timestamp) goto(377b);
                                                                    revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                }
                                                            } else {
                                                                revert(memory[0:(0+output.length)]);
                                                            }
                                                        }
                                                    } else {
                                                        if((msg.value == 0) == 0) goto(3d2b);
                                                        goto(3db6);
                                                    }
                                                } else {
                                                    if((msg.value == 0) == 0) goto(3d2b);
                                                    goto(3db6);
                                                }
                                            } else {
                                                if(0 == var6) {
                                                    if(0 == var7) {
                                                        if(msg.value >= 2b5e3af16b1880000) {
                                                            require((address(var3).code.length));
                                                            if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                require((output.length >= 20));
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                    require((output.length >= 20));
                                                                    var15 += 1;
                                                                    mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                    mapping8[(1 + var15)] = 0;
                                                                    mapping8[(1 + var15)] = msg.value;
                                                                    mapping8[(1 + var15)] = block.timestamp;
                                                                    totalSale = totalSale;
                                                                    ifstorage[2c] {
                                                                        if(storage[2c] == 0) {
                                                                            if(storage[2c] == 0) {
                                                                                return 1;
                                                                            } else {
                                                                                var12 = var12;
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            var12 = var12;
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if(initTime <= block.timestamp) goto(377b);
                                                                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            } else {
                                                                revert(memory[0:(0+output.length)]);
                                                            }
                                                        } else {
                                                            require((address(var3).code.length));
                                                            if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                require((output.length >= 20));
                                                                var15 += 1;
                                                                mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                mapping8[(1 + var15)] = 0;
                                                                mapping8[(1 + var15)] = msg.value;
                                                                mapping8[(1 + var15)] = block.timestamp;
                                                                totalSale = totalSale;
                                                                ifstorage[2c] {
                                                                    if(storage[2c] == 0) {
                                                                        if(storage[2c] == 0) {
                                                                            return 1;
                                                                        } else {
                                                                            var12 = var12;
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        var12 = var12;
                                                                        if(var12 <= storage[15]) {
                                                                            return 1;
                                                                        } else {
                                                                            require(storage[15]);
                                                                            var12 = (var12 % storage[15]);
                                                                            var11 = storage[(((block.timestamp - initTime) / storage[17]) + 18)];
                                                                            var13 = (totalSale - var12);
                                                                            var14 = totalBurn;
                                                                            return 1;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if(initTime <= block.timestamp) goto(377b);
                                                                    revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                }
                                                            } else {
                                                                revert(memory[0:(0+output.length)]);
                                                            }
                                                        }
                                                    } else {
                                                        if((msg.value == 0) == 0) goto(3d2b);
                                                        goto(3db6);
                                                    }
                                                } else {
                                                    if((msg.value == 0) == 0) goto(3d2b);
                                                    goto(3db6);
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if((totalSale / storage[16]) >= 6) {
                                        ifstorage[2c] {
                                            if(var11 <= 0) {
                                                require((186a0 * (a ** decimals)));
                                                require((30d40 * (a ** decimals)));
                                                if((msg.value == 0) == 0) {
                                                    require(msg.value);
                                                    if(((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / msg.value) == ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) {
                                                        require(((msg.sender == 0) == 0));
                                                        require((mapping1[this] >= ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400)));
                                                        require(((mapping1[msg.sender] + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400)) > mapping1[msg.sender]));
                                                        mapping1[this] -= ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400);
                                                        mapping1[msg.sender] = (mapping1[msg.sender] + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                        mapping1[this] -= (((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400) / a);
                                                        mapping1[var7] = (mapping1[var7] + (((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400) / a));
                                                        emit Transfer(this, var7, ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400) / a)
                                                        emit Transfer(this, msg.sender, (msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400)
                                                        require((((mapping1[this] + mapping1[msg.sender]) + mapping1[var7]) == ((mapping1[this] + mapping1[msg.sender]) + mapping1[var7])));
                                                        if(var16 == 0) {
                                                            if(0 == var6) {
                                                                if(0 == var7) {
                                                                    if(msg.value >= 2b5e3af16b1880000) {
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                            require((output.length >= 20));
                                                                            require((address(var3).code.length));
                                                                            if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                                require((output.length >= 20));
                                                                                var15 += 1;
                                                                                mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                                mapping8[(1 + var15)] = ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400);
                                                                                mapping8[(1 + var15)] = msg.value;
                                                                                mapping8[(1 + var15)] = block.timestamp;
                                                                                totalSale = (totalSale + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                ifstorage[2c] {
                                                                                    if(storage[2c] == 0) {
                                                                                        if(storage[2c] == 0) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            var12 = (var12 + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                            if(var12 <= storage[15]) {
                                                                                                return 1;
                                                                                            } else {
                                                                                                require(storage[15]);
                                                                                                var12 = (var12 % storage[15]);
                                                                                                var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                                var13 = (totalSale - var12);
                                                                                                var14 = totalBurn;
                                                                                                return 1;
                                                                                            }
                                                                                        }
                                                                                    } else {
                                                                                        var12 = (var12 + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    if(initTime <= block.timestamp) goto(377b);
                                                                                    revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                                }
                                                                            } else {
                                                                                revert(memory[0:(0+output.length)]);
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    } else {
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                            require((output.length >= 20));
                                                                            var15 += 1;
                                                                            mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                            mapping8[(1 + var15)] = ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400);
                                                                            mapping8[(1 + var15)] = msg.value;
                                                                            mapping8[(1 + var15)] = block.timestamp;
                                                                            totalSale = (totalSale + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                            ifstorage[2c] {
                                                                                if(storage[2c] == 0) {
                                                                                    if(storage[2c] == 0) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        var12 = (var12 + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    var12 = (var12 + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if(initTime <= block.timestamp) goto(377b);
                                                                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    }
                                                                } else {
                                                                    if((msg.value == 0) == 0) goto(3d2b);
                                                                    revert("Invalid instruction (0xfe)");
                                                                }
                                                            } else {
                                                                if((msg.value == 0) == 0) goto(3d2b);
                                                                revert("Invalid instruction (0xfe)");
                                                            }
                                                        } else {
                                                            if(0 == var6) {
                                                                if(0 == var7) {
                                                                    if(msg.value >= 2b5e3af16b1880000) {
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                            require((output.length >= 20));
                                                                            require((address(var3).code.length));
                                                                            if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                                require((output.length >= 20));
                                                                                var15 += 1;
                                                                                mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                                mapping8[(1 + var15)] = ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400);
                                                                                mapping8[(1 + var15)] = msg.value;
                                                                                mapping8[(1 + var15)] = block.timestamp;
                                                                                totalSale = (totalSale + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                ifstorage[2c] {
                                                                                    if(storage[2c] == 0) {
                                                                                        if(storage[2c] == 0) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            var12 = (var12 + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                            if(var12 <= storage[15]) {
                                                                                                return 1;
                                                                                            } else {
                                                                                                require(storage[15]);
                                                                                                var12 = (var12 % storage[15]);
                                                                                                var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                                var13 = (totalSale - var12);
                                                                                                var14 = totalBurn;
                                                                                                return 1;
                                                                                            }
                                                                                        }
                                                                                    } else {
                                                                                        var12 = (var12 + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    if(initTime <= block.timestamp) goto(377b);
                                                                                    revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                                }
                                                                            } else {
                                                                                revert(memory[0:(0+output.length)]);
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    } else {
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                            require((output.length >= 20));
                                                                            var15 += 1;
                                                                            mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                            mapping8[(1 + var15)] = ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400);
                                                                            mapping8[(1 + var15)] = msg.value;
                                                                            mapping8[(1 + var15)] = block.timestamp;
                                                                            totalSale = (totalSale + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                            ifstorage[2c] {
                                                                                if(storage[2c] == 0) {
                                                                                    if(storage[2c] == 0) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        var12 = (var12 + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    var12 = (var12 + ((msg.value * ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if(initTime <= block.timestamp) goto(377b);
                                                                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    }
                                                                } else {
                                                                    if((msg.value == 0) == 0) goto(3d2b);
                                                                    revert("Invalid instruction (0xfe)");
                                                                }
                                                            } else {
                                                                if((msg.value == 0) == 0) goto(3d2b);
                                                                revert("Invalid instruction (0xfe)");
                                                            }
                                                        }
                                                    } else {
                                                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
                                                    }
                                                } else {
                                                    require(((msg.sender == 0) == 0));
                                                    require((mapping1[this] >= 0));
                                                    require((mapping1[msg.sender] > mapping1[msg.sender]));
                                                    mapping1[this] -= 0;
                                                    mapping1[msg.sender] = mapping1[msg.sender];
                                                    mapping1[this] -= 0;
                                                    mapping1[var7] = mapping1[var7];
                                                    emit Transfer(this, var7, 0)
                                                    emit Transfer(this, msg.sender, 0)
                                                    require((((mapping1[this] + mapping1[msg.sender]) + mapping1[var7]) == ((mapping1[this] + mapping1[msg.sender]) + mapping1[var7])));
                                                    if(var16 == 0) {
                                                        if(0 == var6) {
                                                            if(0 == var7) {
                                                                if(msg.value >= 2b5e3af16b1880000) {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                        require((output.length >= 20));
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                            require((output.length >= 20));
                                                                            var15 += 1;
                                                                            mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                            mapping8[(1 + var15)] = 0;
                                                                            mapping8[(1 + var15)] = msg.value;
                                                                            mapping8[(1 + var15)] = block.timestamp;
                                                                            totalSale = totalSale;
                                                                            ifstorage[2c] {
                                                                                if(storage[2c] == 0) {
                                                                                    if(storage[2c] == 0) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        var12 = var12;
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    var12 = var12;
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if(initTime <= block.timestamp) goto(377b);
                                                                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                } else {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                        require((output.length >= 20));
                                                                        var15 += 1;
                                                                        mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                        mapping8[(1 + var15)] = 0;
                                                                        mapping8[(1 + var15)] = msg.value;
                                                                        mapping8[(1 + var15)] = block.timestamp;
                                                                        totalSale = totalSale;
                                                                        ifstorage[2c] {
                                                                            if(storage[2c] == 0) {
                                                                                if(storage[2c] == 0) {
                                                                                    return 1;
                                                                                } else {
                                                                                    var12 = var12;
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                var12 = var12;
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if(initTime <= block.timestamp) goto(377b);
                                                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                }
                                                            } else {
                                                                if((msg.value == 0) == 0) goto(3d2b);
                                                                goto(3db6);
                                                            }
                                                        } else {
                                                            if((msg.value == 0) == 0) goto(3d2b);
                                                            goto(3db6);
                                                        }
                                                    } else {
                                                        if(0 == var6) {
                                                            if(0 == var7) {
                                                                if(msg.value >= 2b5e3af16b1880000) {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                        require((output.length >= 20));
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                            require((output.length >= 20));
                                                                            var15 += 1;
                                                                            mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                            mapping8[(1 + var15)] = 0;
                                                                            mapping8[(1 + var15)] = msg.value;
                                                                            mapping8[(1 + var15)] = block.timestamp;
                                                                            totalSale = totalSale;
                                                                            ifstorage[2c] {
                                                                                if(storage[2c] == 0) {
                                                                                    if(storage[2c] == 0) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        var12 = var12;
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    var12 = var12;
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if(initTime <= block.timestamp) goto(377b);
                                                                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                } else {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                        require((output.length >= 20));
                                                                        var15 += 1;
                                                                        mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                        mapping8[(1 + var15)] = 0;
                                                                        mapping8[(1 + var15)] = msg.value;
                                                                        mapping8[(1 + var15)] = block.timestamp;
                                                                        totalSale = totalSale;
                                                                        ifstorage[2c] {
                                                                            if(storage[2c] == 0) {
                                                                                if(storage[2c] == 0) {
                                                                                    return 1;
                                                                                } else {
                                                                                    var12 = var12;
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                var12 = var12;
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = ((storage[1d] - ((storage[1d] * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((storage[1d] * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if(initTime <= block.timestamp) goto(377b);
                                                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                }
                                                            } else {
                                                                if((msg.value == 0) == 0) goto(3d2b);
                                                                goto(3db6);
                                                            }
                                                        } else {
                                                            if((msg.value == 0) == 0) goto(3d2b);
                                                            goto(3db6);
                                                        }
                                                    }
                                                }
                                            } else {
                                                require((186a0 * (a ** decimals)));
                                                require((30d40 * (a ** decimals)));
                                                if((msg.value == 0) == 0) {
                                                    require(msg.value);
                                                    if(((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / msg.value) == ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) {
                                                        require(((msg.sender == 0) == 0));
                                                        require((mapping1[this] >= ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400)));
                                                        require(((mapping1[msg.sender] + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400)) > mapping1[msg.sender]));
                                                        mapping1[this] -= ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400);
                                                        mapping1[msg.sender] = (mapping1[msg.sender] + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                        mapping1[this] -= (((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400) / a);
                                                        mapping1[var7] = (mapping1[var7] + (((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400) / a));
                                                        emit Transfer(this, var7, ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400) / a)
                                                        emit Transfer(this, msg.sender, (msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400)
                                                        require((((mapping1[this] + mapping1[msg.sender]) + mapping1[var7]) == ((mapping1[this] + mapping1[msg.sender]) + mapping1[var7])));
                                                        if(var16 == 0) {
                                                            if(0 == var6) {
                                                                if(0 == var7) {
                                                                    if(msg.value >= 2b5e3af16b1880000) {
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                            require((output.length >= 20));
                                                                            require((address(var3).code.length));
                                                                            if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                                require((output.length >= 20));
                                                                                var15 += 1;
                                                                                mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                                mapping8[(1 + var15)] = ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400);
                                                                                mapping8[(1 + var15)] = msg.value;
                                                                                mapping8[(1 + var15)] = block.timestamp;
                                                                                totalSale = (totalSale + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                ifstorage[2c] {
                                                                                    if(storage[2c] == 0) {
                                                                                        if(storage[2c] == 0) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            var12 = (var12 + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                            if(var12 <= storage[15]) {
                                                                                                return 1;
                                                                                            } else {
                                                                                                require(storage[15]);
                                                                                                var12 = (var12 % storage[15]);
                                                                                                var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                                var13 = (totalSale - var12);
                                                                                                var14 = totalBurn;
                                                                                                return 1;
                                                                                            }
                                                                                        }
                                                                                    } else {
                                                                                        var12 = (var12 + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    if(initTime <= block.timestamp) goto(377b);
                                                                                    revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                                }
                                                                            } else {
                                                                                revert(memory[0:(0+output.length)]);
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    } else {
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                            require((output.length >= 20));
                                                                            var15 += 1;
                                                                            mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                            mapping8[(1 + var15)] = ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400);
                                                                            mapping8[(1 + var15)] = msg.value;
                                                                            mapping8[(1 + var15)] = block.timestamp;
                                                                            totalSale = (totalSale + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                            ifstorage[2c] {
                                                                                if(storage[2c] == 0) {
                                                                                    if(storage[2c] == 0) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        var12 = (var12 + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    var12 = (var12 + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if(initTime <= block.timestamp) goto(377b);
                                                                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    }
                                                                } else {
                                                                    if((msg.value == 0) == 0) goto(3d2b);
                                                                    revert("Invalid instruction (0xfe)");
                                                                }
                                                            } else {
                                                                if((msg.value == 0) == 0) goto(3d2b);
                                                                revert("Invalid instruction (0xfe)");
                                                            }
                                                        } else {
                                                            if(0 == var6) {
                                                                if(0 == var7) {
                                                                    if(msg.value >= 2b5e3af16b1880000) {
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                            require((output.length >= 20));
                                                                            require((address(var3).code.length));
                                                                            if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                                require((output.length >= 20));
                                                                                var15 += 1;
                                                                                mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                                mapping8[(1 + var15)] = ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400);
                                                                                mapping8[(1 + var15)] = msg.value;
                                                                                mapping8[(1 + var15)] = block.timestamp;
                                                                                totalSale = (totalSale + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                ifstorage[2c] {
                                                                                    if(storage[2c] == 0) {
                                                                                        if(storage[2c] == 0) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            var12 = (var12 + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                            if(var12 <= storage[15]) {
                                                                                                return 1;
                                                                                            } else {
                                                                                                require(storage[15]);
                                                                                                var12 = (var12 % storage[15]);
                                                                                                var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                                var13 = (totalSale - var12);
                                                                                                var14 = totalBurn;
                                                                                                return 1;
                                                                                            }
                                                                                        }
                                                                                    } else {
                                                                                        var12 = (var12 + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    if(initTime <= block.timestamp) goto(377b);
                                                                                    revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                                }
                                                                            } else {
                                                                                revert(memory[0:(0+output.length)]);
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    } else {
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                            require((output.length >= 20));
                                                                            var15 += 1;
                                                                            mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                            mapping8[(1 + var15)] = ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400);
                                                                            mapping8[(1 + var15)] = msg.value;
                                                                            mapping8[(1 + var15)] = block.timestamp;
                                                                            totalSale = (totalSale + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                            ifstorage[2c] {
                                                                                if(storage[2c] == 0) {
                                                                                    if(storage[2c] == 0) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        var12 = (var12 + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    var12 = (var12 + ((msg.value * ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64))) / 2540be400));
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if(initTime <= block.timestamp) goto(377b);
                                                                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    }
                                                                } else {
                                                                    if((msg.value == 0) == 0) goto(3d2b);
                                                                    revert("Invalid instruction (0xfe)");
                                                                }
                                                            } else {
                                                                if((msg.value == 0) == 0) goto(3d2b);
                                                                revert("Invalid instruction (0xfe)");
                                                            }
                                                        }
                                                    } else {
                                                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
                                                    }
                                                } else {
                                                    require(((msg.sender == 0) == 0));
                                                    require((mapping1[this] >= 0));
                                                    require((mapping1[msg.sender] > mapping1[msg.sender]));
                                                    mapping1[this] -= 0;
                                                    mapping1[msg.sender] = mapping1[msg.sender];
                                                    mapping1[this] -= 0;
                                                    mapping1[var7] = mapping1[var7];
                                                    emit Transfer(this, var7, 0)
                                                    emit Transfer(this, msg.sender, 0)
                                                    require((((mapping1[this] + mapping1[msg.sender]) + mapping1[var7]) == ((mapping1[this] + mapping1[msg.sender]) + mapping1[var7])));
                                                    if(var16 == 0) {
                                                        if(0 == var6) {
                                                            if(0 == var7) {
                                                                if(msg.value >= 2b5e3af16b1880000) {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                        require((output.length >= 20));
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                            require((output.length >= 20));
                                                                            var15 += 1;
                                                                            mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                            mapping8[(1 + var15)] = 0;
                                                                            mapping8[(1 + var15)] = msg.value;
                                                                            mapping8[(1 + var15)] = block.timestamp;
                                                                            totalSale = totalSale;
                                                                            ifstorage[2c] {
                                                                                if(storage[2c] == 0) {
                                                                                    if(storage[2c] == 0) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        var12 = var12;
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    var12 = var12;
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if(initTime <= block.timestamp) goto(377b);
                                                                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                } else {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                        require((output.length >= 20));
                                                                        var15 += 1;
                                                                        mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                        mapping8[(1 + var15)] = 0;
                                                                        mapping8[(1 + var15)] = msg.value;
                                                                        mapping8[(1 + var15)] = block.timestamp;
                                                                        totalSale = totalSale;
                                                                        ifstorage[2c] {
                                                                            if(storage[2c] == 0) {
                                                                                if(storage[2c] == 0) {
                                                                                    return 1;
                                                                                } else {
                                                                                    var12 = var12;
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                var12 = var12;
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if(initTime <= block.timestamp) goto(377b);
                                                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                }
                                                            } else {
                                                                if((msg.value == 0) == 0) goto(3d2b);
                                                                goto(3db6);
                                                            }
                                                        } else {
                                                            if((msg.value == 0) == 0) goto(3d2b);
                                                            goto(3db6);
                                                        }
                                                    } else {
                                                        if(0 == var6) {
                                                            if(0 == var7) {
                                                                if(msg.value >= 2b5e3af16b1880000) {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                        require((output.length >= 20));
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                            require((output.length >= 20));
                                                                            var15 += 1;
                                                                            mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                            mapping8[(1 + var15)] = 0;
                                                                            mapping8[(1 + var15)] = msg.value;
                                                                            mapping8[(1 + var15)] = block.timestamp;
                                                                            totalSale = totalSale;
                                                                            ifstorage[2c] {
                                                                                if(storage[2c] == 0) {
                                                                                    if(storage[2c] == 0) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        var12 = var12;
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    var12 = var12;
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if(initTime <= block.timestamp) goto(377b);
                                                                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                } else {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                        require((output.length >= 20));
                                                                        var15 += 1;
                                                                        mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                        mapping8[(1 + var15)] = 0;
                                                                        mapping8[(1 + var15)] = msg.value;
                                                                        mapping8[(1 + var15)] = block.timestamp;
                                                                        totalSale = totalSale;
                                                                        ifstorage[2c] {
                                                                            if(storage[2c] == 0) {
                                                                                if(storage[2c] == 0) {
                                                                                    return 1;
                                                                                } else {
                                                                                    var12 = var12;
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                var12 = var12;
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = ((var11 - ((var11 * ((totalSale - var13) / (30d40 * (a ** decimals)))) / 64)) - ((var11 * ((totalBurn - var14) / (186a0 * (a ** decimals)))) / 64));
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if(initTime <= block.timestamp) goto(377b);
                                                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                }
                                                            } else {
                                                                if((msg.value == 0) == 0) goto(3d2b);
                                                                goto(3db6);
                                                            }
                                                        } else {
                                                            if((msg.value == 0) == 0) goto(3d2b);
                                                            goto(3db6);
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if((msg.value == 0) == 0) {
                                                require(msg.value);
                                                if(((msg.value * storage[1d]) / msg.value) == storage[1d]) {
                                                    require(((msg.sender == 0) == 0));
                                                    require((mapping1[this] >= ((msg.value * storage[1d]) / 2540be400)));
                                                    require(((mapping1[msg.sender] + ((msg.value * storage[1d]) / 2540be400)) > mapping1[msg.sender]));
                                                    mapping1[this] -= ((msg.value * storage[1d]) / 2540be400);
                                                    mapping1[msg.sender] = (mapping1[msg.sender] + ((msg.value * storage[1d]) / 2540be400));
                                                    mapping1[this] -= (((msg.value * storage[1d]) / 2540be400) / a);
                                                    mapping1[var7] = (mapping1[var7] + (((msg.value * storage[1d]) / 2540be400) / a));
                                                    emit Transfer(this, var7, ((msg.value * storage[1d]) / 2540be400) / a)
                                                    emit Transfer(this, msg.sender, (msg.value * storage[1d]) / 2540be400)
                                                    require((((mapping1[this] + mapping1[msg.sender]) + mapping1[var7]) == ((mapping1[this] + mapping1[msg.sender]) + mapping1[var7])));
                                                    if(var16 == 0) {
                                                        if(0 == var6) {
                                                            if(0 == var7) {
                                                                if(msg.value >= 2b5e3af16b1880000) {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                        require((output.length >= 20));
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                            require((output.length >= 20));
                                                                            var15 += 1;
                                                                            mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                            mapping8[(1 + var15)] = ((msg.value * storage[1d]) / 2540be400);
                                                                            mapping8[(1 + var15)] = msg.value;
                                                                            mapping8[(1 + var15)] = block.timestamp;
                                                                            totalSale = (totalSale + ((msg.value * storage[1d]) / 2540be400));
                                                                            ifstorage[2c] {
                                                                                if(storage[2c] == 0) {
                                                                                    if(storage[2c] == 0) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        var12 = (var12 + ((msg.value * storage[1d]) / 2540be400));
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = storage[1d];
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    var12 = (var12 + ((msg.value * storage[1d]) / 2540be400));
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = storage[1d];
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if(initTime <= block.timestamp) goto(377b);
                                                                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                } else {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                        require((output.length >= 20));
                                                                        var15 += 1;
                                                                        mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                        mapping8[(1 + var15)] = ((msg.value * storage[1d]) / 2540be400);
                                                                        mapping8[(1 + var15)] = msg.value;
                                                                        mapping8[(1 + var15)] = block.timestamp;
                                                                        totalSale = (totalSale + ((msg.value * storage[1d]) / 2540be400));
                                                                        ifstorage[2c] {
                                                                            if(storage[2c] == 0) {
                                                                                if(storage[2c] == 0) {
                                                                                    return 1;
                                                                                } else {
                                                                                    var12 = (var12 + ((msg.value * storage[1d]) / 2540be400));
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = storage[1d];
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                var12 = (var12 + ((msg.value * storage[1d]) / 2540be400));
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[1d];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if(initTime <= block.timestamp) goto(377b);
                                                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                }
                                                            } else {
                                                                if((msg.value == 0) == 0) goto(3d2b);
                                                                revert("Invalid instruction (0xfe)");
                                                            }
                                                        } else {
                                                            if((msg.value == 0) == 0) goto(3d2b);
                                                            revert("Invalid instruction (0xfe)");
                                                        }
                                                    } else {
                                                        if(0 == var6) {
                                                            if(0 == var7) {
                                                                if(msg.value >= 2b5e3af16b1880000) {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                        require((output.length >= 20));
                                                                        require((address(var3).code.length));
                                                                        if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                            require((output.length >= 20));
                                                                            var15 += 1;
                                                                            mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                            mapping8[(1 + var15)] = ((msg.value * storage[1d]) / 2540be400);
                                                                            mapping8[(1 + var15)] = msg.value;
                                                                            mapping8[(1 + var15)] = block.timestamp;
                                                                            totalSale = (totalSale + ((msg.value * storage[1d]) / 2540be400));
                                                                            ifstorage[2c] {
                                                                                if(storage[2c] == 0) {
                                                                                    if(storage[2c] == 0) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        var12 = (var12 + ((msg.value * storage[1d]) / 2540be400));
                                                                                        if(var12 <= storage[15]) {
                                                                                            return 1;
                                                                                        } else {
                                                                                            require(storage[15]);
                                                                                            var12 = (var12 % storage[15]);
                                                                                            var11 = storage[1d];
                                                                                            var13 = (totalSale - var12);
                                                                                            var14 = totalBurn;
                                                                                            return 1;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    var12 = (var12 + ((msg.value * storage[1d]) / 2540be400));
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = storage[1d];
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if(initTime <= block.timestamp) goto(377b);
                                                                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                            }
                                                                        } else {
                                                                            revert(memory[0:(0+output.length)]);
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                } else {
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                        require((output.length >= 20));
                                                                        var15 += 1;
                                                                        mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                        mapping8[(1 + var15)] = ((msg.value * storage[1d]) / 2540be400);
                                                                        mapping8[(1 + var15)] = msg.value;
                                                                        mapping8[(1 + var15)] = block.timestamp;
                                                                        totalSale = (totalSale + ((msg.value * storage[1d]) / 2540be400));
                                                                        ifstorage[2c] {
                                                                            if(storage[2c] == 0) {
                                                                                if(storage[2c] == 0) {
                                                                                    return 1;
                                                                                } else {
                                                                                    var12 = (var12 + ((msg.value * storage[1d]) / 2540be400));
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = storage[1d];
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                var12 = (var12 + ((msg.value * storage[1d]) / 2540be400));
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[1d];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if(initTime <= block.timestamp) goto(377b);
                                                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                }
                                                            } else {
                                                                if((msg.value == 0) == 0) goto(3d2b);
                                                                revert("Invalid instruction (0xfe)");
                                                            }
                                                        } else {
                                                            if((msg.value == 0) == 0) goto(3d2b);
                                                            revert("Invalid instruction (0xfe)");
                                                        }
                                                    }
                                                } else {
                                                    revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
                                                }
                                            } else {
                                                require(((msg.sender == 0) == 0));
                                                require((mapping1[this] >= 0));
                                                require((mapping1[msg.sender] > mapping1[msg.sender]));
                                                mapping1[this] -= 0;
                                                mapping1[msg.sender] = mapping1[msg.sender];
                                                mapping1[this] -= 0;
                                                mapping1[var7] = mapping1[var7];
                                                emit Transfer(this, var7, 0)
                                                emit Transfer(this, msg.sender, 0)
                                                require((((mapping1[this] + mapping1[msg.sender]) + mapping1[var7]) == ((mapping1[this] + mapping1[msg.sender]) + mapping1[var7])));
                                                if(var16 == 0) {
                                                    if(0 == var6) {
                                                        if(0 == var7) {
                                                            if(msg.value >= 2b5e3af16b1880000) {
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                    require((output.length >= 20));
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                        require((output.length >= 20));
                                                                        var15 += 1;
                                                                        mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                        mapping8[(1 + var15)] = 0;
                                                                        mapping8[(1 + var15)] = msg.value;
                                                                        mapping8[(1 + var15)] = block.timestamp;
                                                                        totalSale = totalSale;
                                                                        ifstorage[2c] {
                                                                            if(storage[2c] == 0) {
                                                                                if(storage[2c] == 0) {
                                                                                    return 1;
                                                                                } else {
                                                                                    var12 = var12;
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = storage[1d];
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                var12 = var12;
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[1d];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if(initTime <= block.timestamp) goto(377b);
                                                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            } else {
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                    require((output.length >= 20));
                                                                    var15 += 1;
                                                                    mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                    mapping8[(1 + var15)] = 0;
                                                                    mapping8[(1 + var15)] = msg.value;
                                                                    mapping8[(1 + var15)] = block.timestamp;
                                                                    totalSale = totalSale;
                                                                    ifstorage[2c] {
                                                                        if(storage[2c] == 0) {
                                                                            if(storage[2c] == 0) {
                                                                                return 1;
                                                                            } else {
                                                                                var12 = var12;
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[1d];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            var12 = var12;
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = storage[1d];
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if(initTime <= block.timestamp) goto(377b);
                                                                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            }
                                                        } else {
                                                            if((msg.value == 0) == 0) goto(3d2b);
                                                            goto(3db6);
                                                        }
                                                    } else {
                                                        if((msg.value == 0) == 0) goto(3d2b);
                                                        goto(3db6);
                                                    }
                                                } else {
                                                    if(0 == var6) {
                                                        if(0 == var7) {
                                                            if(msg.value >= 2b5e3af16b1880000) {
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                    require((output.length >= 20));
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                        require((output.length >= 20));
                                                                        var15 += 1;
                                                                        mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                        mapping8[(1 + var15)] = 0;
                                                                        mapping8[(1 + var15)] = msg.value;
                                                                        mapping8[(1 + var15)] = block.timestamp;
                                                                        totalSale = totalSale;
                                                                        ifstorage[2c] {
                                                                            if(storage[2c] == 0) {
                                                                                if(storage[2c] == 0) {
                                                                                    return 1;
                                                                                } else {
                                                                                    var12 = var12;
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = storage[1d];
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                var12 = var12;
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[1d];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if(initTime <= block.timestamp) goto(377b);
                                                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            } else {
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                    require((output.length >= 20));
                                                                    var15 += 1;
                                                                    mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                    mapping8[(1 + var15)] = 0;
                                                                    mapping8[(1 + var15)] = msg.value;
                                                                    mapping8[(1 + var15)] = block.timestamp;
                                                                    totalSale = totalSale;
                                                                    ifstorage[2c] {
                                                                        if(storage[2c] == 0) {
                                                                            if(storage[2c] == 0) {
                                                                                return 1;
                                                                            } else {
                                                                                var12 = var12;
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[1d];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            var12 = var12;
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = storage[1d];
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if(initTime <= block.timestamp) goto(377b);
                                                                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            }
                                                        } else {
                                                            if((msg.value == 0) == 0) goto(3d2b);
                                                            goto(3db6);
                                                        }
                                                    } else {
                                                        if((msg.value == 0) == 0) goto(3d2b);
                                                        goto(3db6);
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        require(((totalSale / storage[16]) < 6));
                                        if((msg.value == 0) == 0) {
                                            require(msg.value);
                                            if(((msg.value * storage[((totalSale / storage[16]) + 18)]) / msg.value) == storage[((totalSale / storage[16]) + 18)]) {
                                                require(((msg.sender == 0) == 0));
                                                require((mapping1[this] >= ((msg.value * storage[((totalSale / storage[16]) + 18)]) / 2540be400)));
                                                require(((mapping1[msg.sender] + ((msg.value * storage[((totalSale / storage[16]) + 18)]) / 2540be400)) > mapping1[msg.sender]));
                                                mapping1[this] -= ((msg.value * storage[((totalSale / storage[16]) + 18)]) / 2540be400);
                                                mapping1[msg.sender] = (mapping1[msg.sender] + ((msg.value * storage[((totalSale / storage[16]) + 18)]) / 2540be400));
                                                mapping1[this] -= (((msg.value * storage[((totalSale / storage[16]) + 18)]) / 2540be400) / a);
                                                mapping1[var7] = (mapping1[var7] + (((msg.value * storage[((totalSale / storage[16]) + 18)]) / 2540be400) / a));
                                                emit Transfer(this, var7, ((msg.value * storage[((totalSale / storage[16]) + 18)]) / 2540be400) / a)
                                                emit Transfer(this, msg.sender, (msg.value * storage[((totalSale / storage[16]) + 18)]) / 2540be400)
                                                require((((mapping1[this] + mapping1[msg.sender]) + mapping1[var7]) == ((mapping1[this] + mapping1[msg.sender]) + mapping1[var7])));
                                                if(var16 == 0) {
                                                    if(0 == var6) {
                                                        if(0 == var7) {
                                                            if(msg.value >= 2b5e3af16b1880000) {
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                    require((output.length >= 20));
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                        require((output.length >= 20));
                                                                        var15 += 1;
                                                                        mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                        mapping8[(1 + var15)] = ((msg.value * storage[((totalSale / storage[16]) + 18)]) / 2540be400);
                                                                        mapping8[(1 + var15)] = msg.value;
                                                                        mapping8[(1 + var15)] = block.timestamp;
                                                                        totalSale = (totalSale + ((msg.value * storage[((totalSale / storage[16]) + 18)]) / 2540be400));
                                                                        ifstorage[2c] {
                                                                            if(storage[2c] == 0) {
                                                                                if(storage[2c] == 0) {
                                                                                    return 1;
                                                                                } else {
                                                                                    var12 = (var12 + ((msg.value * storage[((totalSale / storage[16]) + 18)]) / 2540be400));
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = storage[((totalSale / storage[16]) + 18)];
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                var12 = (var12 + ((msg.value * storage[((totalSale / storage[16]) + 18)]) / 2540be400));
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[((totalSale / storage[16]) + 18)];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if(initTime <= block.timestamp) goto(377b);
                                                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            } else {
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                    require((output.length >= 20));
                                                                    var15 += 1;
                                                                    mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                    mapping8[(1 + var15)] = ((msg.value * storage[((totalSale / storage[16]) + 18)]) / 2540be400);
                                                                    mapping8[(1 + var15)] = msg.value;
                                                                    mapping8[(1 + var15)] = block.timestamp;
                                                                    totalSale = (totalSale + ((msg.value * storage[((totalSale / storage[16]) + 18)]) / 2540be400));
                                                                    ifstorage[2c] {
                                                                        if(storage[2c] == 0) {
                                                                            if(storage[2c] == 0) {
                                                                                return 1;
                                                                            } else {
                                                                                var12 = (var12 + ((msg.value * storage[((totalSale / storage[16]) + 18)]) / 2540be400));
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[((totalSale / storage[16]) + 18)];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            var12 = (var12 + ((msg.value * storage[((totalSale / storage[16]) + 18)]) / 2540be400));
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = storage[((totalSale / storage[16]) + 18)];
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if(initTime <= block.timestamp) goto(377b);
                                                                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            }
                                                        } else {
                                                            if((msg.value == 0) == 0) goto(3d2b);
                                                            revert("Invalid instruction (0xfe)");
                                                        }
                                                    } else {
                                                        if((msg.value == 0) == 0) goto(3d2b);
                                                        revert("Invalid instruction (0xfe)");
                                                    }
                                                } else {
                                                    if(0 == var6) {
                                                        if(0 == var7) {
                                                            if(msg.value >= 2b5e3af16b1880000) {
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                    require((output.length >= 20));
                                                                    require((address(var3).code.length));
                                                                    if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                        require((output.length >= 20));
                                                                        var15 += 1;
                                                                        mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                        mapping8[(1 + var15)] = ((msg.value * storage[((totalSale / storage[16]) + 18)]) / 2540be400);
                                                                        mapping8[(1 + var15)] = msg.value;
                                                                        mapping8[(1 + var15)] = block.timestamp;
                                                                        totalSale = (totalSale + ((msg.value * storage[((totalSale / storage[16]) + 18)]) / 2540be400));
                                                                        ifstorage[2c] {
                                                                            if(storage[2c] == 0) {
                                                                                if(storage[2c] == 0) {
                                                                                    return 1;
                                                                                } else {
                                                                                    var12 = (var12 + ((msg.value * storage[((totalSale / storage[16]) + 18)]) / 2540be400));
                                                                                    if(var12 <= storage[15]) {
                                                                                        return 1;
                                                                                    } else {
                                                                                        require(storage[15]);
                                                                                        var12 = (var12 % storage[15]);
                                                                                        var11 = storage[((totalSale / storage[16]) + 18)];
                                                                                        var13 = (totalSale - var12);
                                                                                        var14 = totalBurn;
                                                                                        return 1;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                var12 = (var12 + ((msg.value * storage[((totalSale / storage[16]) + 18)]) / 2540be400));
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[((totalSale / storage[16]) + 18)];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if(initTime <= block.timestamp) goto(377b);
                                                                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                        }
                                                                    } else {
                                                                        revert(memory[0:(0+output.length)]);
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            } else {
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                    require((output.length >= 20));
                                                                    var15 += 1;
                                                                    mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                    mapping8[(1 + var15)] = ((msg.value * storage[((totalSale / storage[16]) + 18)]) / 2540be400);
                                                                    mapping8[(1 + var15)] = msg.value;
                                                                    mapping8[(1 + var15)] = block.timestamp;
                                                                    totalSale = (totalSale + ((msg.value * storage[((totalSale / storage[16]) + 18)]) / 2540be400));
                                                                    ifstorage[2c] {
                                                                        if(storage[2c] == 0) {
                                                                            if(storage[2c] == 0) {
                                                                                return 1;
                                                                            } else {
                                                                                var12 = (var12 + ((msg.value * storage[((totalSale / storage[16]) + 18)]) / 2540be400));
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[((totalSale / storage[16]) + 18)];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            var12 = (var12 + ((msg.value * storage[((totalSale / storage[16]) + 18)]) / 2540be400));
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = storage[((totalSale / storage[16]) + 18)];
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if(initTime <= block.timestamp) goto(377b);
                                                                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            }
                                                        } else {
                                                            if((msg.value == 0) == 0) goto(3d2b);
                                                            revert("Invalid instruction (0xfe)");
                                                        }
                                                    } else {
                                                        if((msg.value == 0) == 0) goto(3d2b);
                                                        revert("Invalid instruction (0xfe)");
                                                    }
                                                }
                                            } else {
                                                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
                                            }
                                        } else {
                                            require(((msg.sender == 0) == 0));
                                            require((mapping1[this] >= 0));
                                            require((mapping1[msg.sender] > mapping1[msg.sender]));
                                            mapping1[this] -= 0;
                                            mapping1[msg.sender] = mapping1[msg.sender];
                                            mapping1[this] -= 0;
                                            mapping1[var7] = mapping1[var7];
                                            emit Transfer(this, var7, 0)
                                            emit Transfer(this, msg.sender, 0)
                                            require((((mapping1[this] + mapping1[msg.sender]) + mapping1[var7]) == ((mapping1[this] + mapping1[msg.sender]) + mapping1[var7])));
                                            if(var16 == 0) {
                                                if(0 == var6) {
                                                    if(0 == var7) {
                                                        if(msg.value >= 2b5e3af16b1880000) {
                                                            require((address(var3).code.length));
                                                            if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                require((output.length >= 20));
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                    require((output.length >= 20));
                                                                    var15 += 1;
                                                                    mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                    mapping8[(1 + var15)] = 0;
                                                                    mapping8[(1 + var15)] = msg.value;
                                                                    mapping8[(1 + var15)] = block.timestamp;
                                                                    totalSale = totalSale;
                                                                    ifstorage[2c] {
                                                                        if(storage[2c] == 0) {
                                                                            if(storage[2c] == 0) {
                                                                                return 1;
                                                                            } else {
                                                                                var12 = var12;
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[((totalSale / storage[16]) + 18)];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            var12 = var12;
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = storage[((totalSale / storage[16]) + 18)];
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if(initTime <= block.timestamp) goto(377b);
                                                                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            } else {
                                                                revert(memory[0:(0+output.length)]);
                                                            }
                                                        } else {
                                                            require((address(var3).code.length));
                                                            if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                require((output.length >= 20));
                                                                var15 += 1;
                                                                mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                mapping8[(1 + var15)] = 0;
                                                                mapping8[(1 + var15)] = msg.value;
                                                                mapping8[(1 + var15)] = block.timestamp;
                                                                totalSale = totalSale;
                                                                ifstorage[2c] {
                                                                    if(storage[2c] == 0) {
                                                                        if(storage[2c] == 0) {
                                                                            return 1;
                                                                        } else {
                                                                            var12 = var12;
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = storage[((totalSale / storage[16]) + 18)];
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        var12 = var12;
                                                                        if(var12 <= storage[15]) {
                                                                            return 1;
                                                                        } else {
                                                                            require(storage[15]);
                                                                            var12 = (var12 % storage[15]);
                                                                            var11 = storage[((totalSale / storage[16]) + 18)];
                                                                            var13 = (totalSale - var12);
                                                                            var14 = totalBurn;
                                                                            return 1;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if(initTime <= block.timestamp) goto(377b);
                                                                    revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                }
                                                            } else {
                                                                revert(memory[0:(0+output.length)]);
                                                            }
                                                        }
                                                    } else {
                                                        if((msg.value == 0) == 0) goto(3d2b);
                                                        goto(3db6);
                                                    }
                                                } else {
                                                    if((msg.value == 0) == 0) goto(3d2b);
                                                    goto(3db6);
                                                }
                                            } else {
                                                if(0 == var6) {
                                                    if(0 == var7) {
                                                        if(msg.value >= 2b5e3af16b1880000) {
                                                            require((address(var3).code.length));
                                                            if(call(gasleft(),var3,0,80,44,80,20)) {
                                                                require((output.length >= 20));
                                                                require((address(var3).code.length));
                                                                if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                    require((output.length >= 20));
                                                                    var15 += 1;
                                                                    mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                    mapping8[(1 + var15)] = 0;
                                                                    mapping8[(1 + var15)] = msg.value;
                                                                    mapping8[(1 + var15)] = block.timestamp;
                                                                    totalSale = totalSale;
                                                                    ifstorage[2c] {
                                                                        if(storage[2c] == 0) {
                                                                            if(storage[2c] == 0) {
                                                                                return 1;
                                                                            } else {
                                                                                var12 = var12;
                                                                                if(var12 <= storage[15]) {
                                                                                    return 1;
                                                                                } else {
                                                                                    require(storage[15]);
                                                                                    var12 = (var12 % storage[15]);
                                                                                    var11 = storage[((totalSale / storage[16]) + 18)];
                                                                                    var13 = (totalSale - var12);
                                                                                    var14 = totalBurn;
                                                                                    return 1;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            var12 = var12;
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = storage[((totalSale / storage[16]) + 18)];
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if(initTime <= block.timestamp) goto(377b);
                                                                        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                    }
                                                                } else {
                                                                    revert(memory[0:(0+output.length)]);
                                                                }
                                                            } else {
                                                                revert(memory[0:(0+output.length)]);
                                                            }
                                                        } else {
                                                            require((address(var3).code.length));
                                                            if(call(gasleft(),var3,0,80,4,80,20)) {
                                                                require((output.length >= 20));
                                                                var15 += 1;
                                                                mapping8[(1 + var15)] = ((msg.sender * 1) || (-10000000000000000000000000000000000000000 && mapping8[(1 + var15)]));
                                                                mapping8[(1 + var15)] = 0;
                                                                mapping8[(1 + var15)] = msg.value;
                                                                mapping8[(1 + var15)] = block.timestamp;
                                                                totalSale = totalSale;
                                                                ifstorage[2c] {
                                                                    if(storage[2c] == 0) {
                                                                        if(storage[2c] == 0) {
                                                                            return 1;
                                                                        } else {
                                                                            var12 = var12;
                                                                            if(var12 <= storage[15]) {
                                                                                return 1;
                                                                            } else {
                                                                                require(storage[15]);
                                                                                var12 = (var12 % storage[15]);
                                                                                var11 = storage[((totalSale / storage[16]) + 18)];
                                                                                var13 = (totalSale - var12);
                                                                                var14 = totalBurn;
                                                                                return 1;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        var12 = var12;
                                                                        if(var12 <= storage[15]) {
                                                                            return 1;
                                                                        } else {
                                                                            require(storage[15]);
                                                                            var12 = (var12 % storage[15]);
                                                                            var11 = storage[((totalSale / storage[16]) + 18)];
                                                                            var13 = (totalSale - var12);
                                                                            var14 = totalBurn;
                                                                            return 1;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if(initTime <= block.timestamp) goto(377b);
                                                                    revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[288]), (memory[320]), (memory[352]));
                                                                }
                                                            } else {
                                                                revert(memory[0:(0+output.length)]);
                                                            }
                                                        }
                                                    } else {
                                                        if((msg.value == 0) == 0) goto(3d2b);
                                                        goto(3db6);
                                                    }
                                                } else {
                                                    if((msg.value == 0) == 0) goto(3d2b);
                                                    goto(3db6);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
                        }
                    } else {
                        revert(memory[0:(0+output.length)]);
                    }
                } else {
                    revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
                }
            } else {
                revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
            }
        } else {
            revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
        }
    } else {
        revert(8c379a000000000000000000000000000000000000000000000000000000000, (memory[160]), (memory[192]), (memory[224]));
    }
}

function allowance(address _arg0, address _arg1) public {
    require(((msg.data.length - 4) >= 40));
    return(mapping2[_arg0]);
}

function de291f78() public {
    require(((msg.data.length - 4) >= 20));
    require((msg.sender == owner));
    dev = ((_arg0 * 1) || (-10000000000000000000000000000000000000000 && dev));
    return;
}

function e64fbeb5() public view {
    return(var15);
}

function ede3e048() public view {
    return(storage[13]);
}

function efcec820() public {
    require((msg.sender == owner));
    if(0 == var6) {
        return;
    } else {
        if(call((((this.balance) == 0) * 8fc),var6,(this.balance),80,0,80,0)) {
            log(5381802256719608950518708652694388774698135386127492877951007192915406647793, var6, this.balance)
            return;
        } else {
            revert(memory[0:(0+output.length)]);
        }
    }
}

function f6c15f69() public view {
    return(var12);
}

function f749133d() public {
    require(((msg.data.length - 4) >= 20));
    require((msg.sender == owner));
    var7 = ((_arg0 * 1) || (-10000000000000000000000000000000000000000 && var7));
    return;
}

function f9d33ec4() public {
    require(((msg.data.length - 4) >= 40));
    return(mapping3[_arg0][1], mapping3[_arg0][2], (mapping3[_arg0][2] / 100));
}

function ff14302a() public {
    require(((msg.data.length - 4) >= 20));
    require((msg.sender == owner));
    owner = ((_arg0 * 1) || (-10000000000000000000000000000000000000000 && owner));
    return;
}

